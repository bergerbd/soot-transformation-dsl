/*
* generated by Xtext
*/
package soot.jimple.toolkits.transformation.dsl.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import soot.jimple.toolkits.transformation.dsl.services.TransformationLanguageGrammarAccess;

public class TransformationLanguageParser extends AbstractContentAssistParser {
	
	@Inject
	private TransformationLanguageGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected soot.jimple.toolkits.transformation.dsl.ui.contentassist.antlr.internal.InternalTransformationLanguageParser createParser() {
		soot.jimple.toolkits.transformation.dsl.ui.contentassist.antlr.internal.InternalTransformationLanguageParser result = new soot.jimple.toolkits.transformation.dsl.ui.contentassist.antlr.internal.InternalTransformationLanguageParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getPatternAccess().getAlternatives(), "rule__Pattern__Alternatives");
					put(grammarAccess.getReplacementAccess().getAlternatives(), "rule__Replacement__Alternatives");
					put(grammarAccess.getTypeAccess().getAlternatives_1(), "rule__Type__Alternatives_1");
					put(grammarAccess.getLabelOrStatementAccess().getAlternatives(), "rule__LabelOrStatement__Alternatives");
					put(grammarAccess.getStatementAccess().getAlternatives(), "rule__Statement__Alternatives");
					put(grammarAccess.getDefinitionStmtAccess().getAlternatives(), "rule__DefinitionStmt__Alternatives");
					put(grammarAccess.getMonitorStmtAccess().getAlternatives(), "rule__MonitorStmt__Alternatives");
					put(grammarAccess.getValueAccess().getAlternatives(), "rule__Value__Alternatives");
					put(grammarAccess.getNonExprAccess().getAlternatives(), "rule__NonExpr__Alternatives");
					put(grammarAccess.getExprAccess().getAlternatives(), "rule__Expr__Alternatives");
					put(grammarAccess.getAnyNewExprAccess().getAlternatives(), "rule__AnyNewExpr__Alternatives");
					put(grammarAccess.getBinOpExprAccess().getAlternatives(), "rule__BinOpExpr__Alternatives");
					put(grammarAccess.getConditionalExprAccess().getAlternatives(), "rule__ConditionalExpr__Alternatives");
					put(grammarAccess.getSootTypeAccess().getAlternatives(), "rule__SootType__Alternatives");
					put(grammarAccess.getInvokeExprAccess().getAlternatives(), "rule__InvokeExpr__Alternatives");
					put(grammarAccess.getInstanceInvokeExprAccess().getAlternatives(), "rule__InstanceInvokeExpr__Alternatives");
					put(grammarAccess.getLocalOrWildcardAccess().getAlternatives(), "rule__LocalOrWildcard__Alternatives");
					put(grammarAccess.getUnopExprAccess().getAlternatives(), "rule__UnopExpr__Alternatives");
					put(grammarAccess.getRefAccess().getAlternatives(), "rule__Ref__Alternatives");
					put(grammarAccess.getIdentityRefAccess().getAlternatives(), "rule__IdentityRef__Alternatives");
					put(grammarAccess.getConcreteRefAccess().getAlternatives(), "rule__ConcreteRef__Alternatives");
					put(grammarAccess.getFieldRefAccess().getAlternatives(), "rule__FieldRef__Alternatives");
					put(grammarAccess.getConstantAccess().getAlternatives(), "rule__Constant__Alternatives");
					put(grammarAccess.getQualifiedNameOrWildcardAccess().getAlternatives(), "rule__QualifiedNameOrWildcard__Alternatives");
					put(grammarAccess.getNumericConstantAccess().getAlternatives(), "rule__NumericConstant__Alternatives");
					put(grammarAccess.getWildcardEqualityExpressionAccess().getAlternatives_1_0(), "rule__WildcardEqualityExpression__Alternatives_1_0");
					put(grammarAccess.getWildcardRelationalOpAccess().getAlternatives(), "rule__WildcardRelationalOp__Alternatives");
					put(grammarAccess.getWildcardAdditiveExpressionAccess().getAlternatives_1_0(), "rule__WildcardAdditiveExpression__Alternatives_1_0");
					put(grammarAccess.getWildcardMultiplicativeExpressionAccess().getAlternatives_1_0(), "rule__WildcardMultiplicativeExpression__Alternatives_1_0");
					put(grammarAccess.getWildcardUnaryExpressionAccess().getAlternatives(), "rule__WildcardUnaryExpression__Alternatives");
					put(grammarAccess.getWildcardUnaryExpressionNotPlusMinusAccess().getAlternatives(), "rule__WildcardUnaryExpressionNotPlusMinus__Alternatives");
					put(grammarAccess.getWildcardPrimaryAccess().getAlternatives(), "rule__WildcardPrimary__Alternatives");
					put(grammarAccess.getWildcardTypeAccess().getAlternatives(), "rule__WildcardType__Alternatives");
					put(grammarAccess.getWildcardPrimitiveTypeAccess().getAlternatives(), "rule__WildcardPrimitiveType__Alternatives");
					put(grammarAccess.getWildcardLiteralAccess().getAlternatives(), "rule__WildcardLiteral__Alternatives");
					put(grammarAccess.getWildcardBooleanAccess().getAlternatives(), "rule__WildcardBoolean__Alternatives");
					put(grammarAccess.getWildcardDereferenceAccess().getAlternatives(), "rule__WildcardDereference__Alternatives");
					put(grammarAccess.getVisibilityAccess().getAlternatives(), "rule__Visibility__Alternatives");
					put(grammarAccess.getTransformationAccess().getGroup(), "rule__Transformation__Group__0");
					put(grammarAccess.getTransformationAccess().getGroup_7(), "rule__Transformation__Group_7__0");
					put(grammarAccess.getTypeAccess().getGroup(), "rule__Type__Group__0");
					put(grammarAccess.getTypeAccess().getGroup_3(), "rule__Type__Group_3__0");
					put(grammarAccess.getTypeAccess().getGroup_4(), "rule__Type__Group_4__0");
					put(grammarAccess.getTypeAccess().getGroup_4_2(), "rule__Type__Group_4_2__0");
					put(grammarAccess.getFieldAccess().getGroup(), "rule__Field__Group__0");
					put(grammarAccess.getMethodAccess().getGroup(), "rule__Method__Group__0");
					put(grammarAccess.getMethodAccess().getGroup_5(), "rule__Method__Group_5__0");
					put(grammarAccess.getMethodAccess().getGroup_5_1(), "rule__Method__Group_5_1__0");
					put(grammarAccess.getBodyAccess().getGroup(), "rule__Body__Group__0");
					put(grammarAccess.getDeclarationAccess().getGroup(), "rule__Declaration__Group__0");
					put(grammarAccess.getDeclarationAccess().getGroup_2(), "rule__Declaration__Group_2__0");
					put(grammarAccess.getLabelOrStatementAccess().getGroup_1(), "rule__LabelOrStatement__Group_1__0");
					put(grammarAccess.getLabelAccess().getGroup(), "rule__Label__Group__0");
					put(grammarAccess.getBreakpointStmtAccess().getGroup(), "rule__BreakpointStmt__Group__0");
					put(grammarAccess.getAssignStmtAccess().getGroup(), "rule__AssignStmt__Group__0");
					put(grammarAccess.getIdentityStmtAccess().getGroup(), "rule__IdentityStmt__Group__0");
					put(grammarAccess.getGotoStmtAccess().getGroup(), "rule__GotoStmt__Group__0");
					put(grammarAccess.getIfStmtAccess().getGroup(), "rule__IfStmt__Group__0");
					put(grammarAccess.getTableSwitchStmtAccess().getGroup(), "rule__TableSwitchStmt__Group__0");
					put(grammarAccess.getTableSwitchStmtAccess().getGroup_5(), "rule__TableSwitchStmt__Group_5__0");
					put(grammarAccess.getLookupSwitchStmtAccess().getGroup(), "rule__LookupSwitchStmt__Group__0");
					put(grammarAccess.getEnterMonitorStmtAccess().getGroup(), "rule__EnterMonitorStmt__Group__0");
					put(grammarAccess.getExitMonitorStmtAccess().getGroup(), "rule__ExitMonitorStmt__Group__0");
					put(grammarAccess.getNopStmtAccess().getGroup(), "rule__NopStmt__Group__0");
					put(grammarAccess.getRetStmtAccess().getGroup(), "rule__RetStmt__Group__0");
					put(grammarAccess.getReturnVoidStmtAccess().getGroup(), "rule__ReturnVoidStmt__Group__0");
					put(grammarAccess.getReturnStmtAccess().getGroup(), "rule__ReturnStmt__Group__0");
					put(grammarAccess.getCaseAccess().getGroup(), "rule__Case__Group__0");
					put(grammarAccess.getThrowStmtAccess().getGroup(), "rule__ThrowStmt__Group__0");
					put(grammarAccess.getAddExprAccess().getGroup(), "rule__AddExpr__Group__0");
					put(grammarAccess.getAndExprAccess().getGroup(), "rule__AndExpr__Group__0");
					put(grammarAccess.getCmpExprAccess().getGroup(), "rule__CmpExpr__Group__0");
					put(grammarAccess.getCmpgExprAccess().getGroup(), "rule__CmpgExpr__Group__0");
					put(grammarAccess.getCmplExprAccess().getGroup(), "rule__CmplExpr__Group__0");
					put(grammarAccess.getDivExprAccess().getGroup(), "rule__DivExpr__Group__0");
					put(grammarAccess.getMulExprAccess().getGroup(), "rule__MulExpr__Group__0");
					put(grammarAccess.getOrExprAccess().getGroup(), "rule__OrExpr__Group__0");
					put(grammarAccess.getRemExprAccess().getGroup(), "rule__RemExpr__Group__0");
					put(grammarAccess.getShlExprAccess().getGroup(), "rule__ShlExpr__Group__0");
					put(grammarAccess.getShrExprAccess().getGroup(), "rule__ShrExpr__Group__0");
					put(grammarAccess.getSubExprAccess().getGroup(), "rule__SubExpr__Group__0");
					put(grammarAccess.getUshrExprAccess().getGroup(), "rule__UshrExpr__Group__0");
					put(grammarAccess.getXorExprAccess().getGroup(), "rule__XorExpr__Group__0");
					put(grammarAccess.getEqExprAccess().getGroup(), "rule__EqExpr__Group__0");
					put(grammarAccess.getGeExprAccess().getGroup(), "rule__GeExpr__Group__0");
					put(grammarAccess.getGtExprAccess().getGroup(), "rule__GtExpr__Group__0");
					put(grammarAccess.getLeExprAccess().getGroup(), "rule__LeExpr__Group__0");
					put(grammarAccess.getLtExprAccess().getGroup(), "rule__LtExpr__Group__0");
					put(grammarAccess.getNeExprAccess().getGroup(), "rule__NeExpr__Group__0");
					put(grammarAccess.getCastExprAccess().getGroup(), "rule__CastExpr__Group__0");
					put(grammarAccess.getInstanceOfExprAccess().getGroup(), "rule__InstanceOfExpr__Group__0");
					put(grammarAccess.getSootMethodRefAccess().getGroup(), "rule__SootMethodRef__Group__0");
					put(grammarAccess.getSootMethodRefAccess().getGroup_6(), "rule__SootMethodRef__Group_6__0");
					put(grammarAccess.getSootMethodRefAccess().getGroup_6_1(), "rule__SootMethodRef__Group_6_1__0");
					put(grammarAccess.getStaticInvokeExprAccess().getGroup(), "rule__StaticInvokeExpr__Group__0");
					put(grammarAccess.getStaticInvokeExprAccess().getGroup_4(), "rule__StaticInvokeExpr__Group_4__0");
					put(grammarAccess.getStaticInvokeExprAccess().getGroup_4_1(), "rule__StaticInvokeExpr__Group_4_1__0");
					put(grammarAccess.getInterfaceInvokeExprAccess().getGroup(), "rule__InterfaceInvokeExpr__Group__0");
					put(grammarAccess.getInterfaceInvokeExprAccess().getGroup_5(), "rule__InterfaceInvokeExpr__Group_5__0");
					put(grammarAccess.getInterfaceInvokeExprAccess().getGroup_5_1(), "rule__InterfaceInvokeExpr__Group_5_1__0");
					put(grammarAccess.getSpecialInvokeExprAccess().getGroup(), "rule__SpecialInvokeExpr__Group__0");
					put(grammarAccess.getSpecialInvokeExprAccess().getGroup_5(), "rule__SpecialInvokeExpr__Group_5__0");
					put(grammarAccess.getSpecialInvokeExprAccess().getGroup_5_1(), "rule__SpecialInvokeExpr__Group_5_1__0");
					put(grammarAccess.getVirtualInvokeExprAccess().getGroup(), "rule__VirtualInvokeExpr__Group__0");
					put(grammarAccess.getVirtualInvokeExprAccess().getGroup_5(), "rule__VirtualInvokeExpr__Group_5__0");
					put(grammarAccess.getVirtualInvokeExprAccess().getGroup_5_1(), "rule__VirtualInvokeExpr__Group_5_1__0");
					put(grammarAccess.getNewArrayExprAccess().getGroup(), "rule__NewArrayExpr__Group__0");
					put(grammarAccess.getNewExprAccess().getGroup(), "rule__NewExpr__Group__0");
					put(grammarAccess.getNewMultiArrayExprAccess().getGroup(), "rule__NewMultiArrayExpr__Group__0");
					put(grammarAccess.getDimensionAccess().getGroup(), "rule__Dimension__Group__0");
					put(grammarAccess.getLengthExprAccess().getGroup(), "rule__LengthExpr__Group__0");
					put(grammarAccess.getNegExprAccess().getGroup(), "rule__NegExpr__Group__0");
					put(grammarAccess.getParameterRefAccess().getGroup(), "rule__ParameterRef__Group__0");
					put(grammarAccess.getThisRefAccess().getGroup(), "rule__ThisRef__Group__0");
					put(grammarAccess.getCaughtExceptionRefAccess().getGroup(), "rule__CaughtExceptionRef__Group__0");
					put(grammarAccess.getArrayRefAccess().getGroup(), "rule__ArrayRef__Group__0");
					put(grammarAccess.getSootFieldRefAccess().getGroup(), "rule__SootFieldRef__Group__0");
					put(grammarAccess.getInstanceFieldRefAccess().getGroup(), "rule__InstanceFieldRef__Group__0");
					put(grammarAccess.getClassConstantAccess().getGroup(), "rule__ClassConstant__Group__0");
					put(grammarAccess.getQualifiedNameWildcardAccess().getGroup(), "rule__QualifiedNameWildcard__Group__0");
					put(grammarAccess.getNullConstantAccess().getGroup(), "rule__NullConstant__Group__0");
					put(grammarAccess.getLongConstantAccess().getGroup(), "rule__LongConstant__Group__0");
					put(grammarAccess.getDoubleConstantAccess().getGroup(), "rule__DoubleConstant__Group__0");
					put(grammarAccess.getFloatConstantAccess().getGroup(), "rule__FloatConstant__Group__0");
					put(grammarAccess.getMethodNameAccess().getGroup(), "rule__MethodName__Group__0");
					put(grammarAccess.getWildcardAccess().getGroup(), "rule__Wildcard__Group__0");
					put(grammarAccess.getWildcardNameAccess().getGroup(), "rule__WildcardName__Group__0");
					put(grammarAccess.getWildcardConditionalOrExpressionAccess().getGroup(), "rule__WildcardConditionalOrExpression__Group__0");
					put(grammarAccess.getWildcardConditionalOrExpressionAccess().getGroup_1(), "rule__WildcardConditionalOrExpression__Group_1__0");
					put(grammarAccess.getWildcardConditionalAndExpressionAccess().getGroup(), "rule__WildcardConditionalAndExpression__Group__0");
					put(grammarAccess.getWildcardConditionalAndExpressionAccess().getGroup_1(), "rule__WildcardConditionalAndExpression__Group_1__0");
					put(grammarAccess.getWildcardEqualityExpressionAccess().getGroup(), "rule__WildcardEqualityExpression__Group__0");
					put(grammarAccess.getWildcardEqualityExpressionAccess().getGroup_1(), "rule__WildcardEqualityExpression__Group_1__0");
					put(grammarAccess.getWildcardInstanceOfExpressionAccess().getGroup(), "rule__WildcardInstanceOfExpression__Group__0");
					put(grammarAccess.getWildcardInstanceOfExpressionAccess().getGroup_1(), "rule__WildcardInstanceOfExpression__Group_1__0");
					put(grammarAccess.getWildcardRelationalExpressionAccess().getGroup(), "rule__WildcardRelationalExpression__Group__0");
					put(grammarAccess.getWildcardRelationalExpressionAccess().getGroup_1(), "rule__WildcardRelationalExpression__Group_1__0");
					put(grammarAccess.getWildcardAdditiveExpressionAccess().getGroup(), "rule__WildcardAdditiveExpression__Group__0");
					put(grammarAccess.getWildcardAdditiveExpressionAccess().getGroup_1(), "rule__WildcardAdditiveExpression__Group_1__0");
					put(grammarAccess.getWildcardMultiplicativeExpressionAccess().getGroup(), "rule__WildcardMultiplicativeExpression__Group__0");
					put(grammarAccess.getWildcardMultiplicativeExpressionAccess().getGroup_1(), "rule__WildcardMultiplicativeExpression__Group_1__0");
					put(grammarAccess.getWildcardUnaryExpressionAccess().getGroup_0(), "rule__WildcardUnaryExpression__Group_0__0");
					put(grammarAccess.getWildcardUnaryExpressionAccess().getGroup_1(), "rule__WildcardUnaryExpression__Group_1__0");
					put(grammarAccess.getWildcardUnaryExpressionNotPlusMinusAccess().getGroup_0(), "rule__WildcardUnaryExpressionNotPlusMinus__Group_0__0");
					put(grammarAccess.getWildcardUnaryExpressionNotPlusMinusAccess().getGroup_1(), "rule__WildcardUnaryExpressionNotPlusMinus__Group_1__0");
					put(grammarAccess.getWildcardParExpressionAccess().getGroup(), "rule__WildcardParExpression__Group__0");
					put(grammarAccess.getWildcardClassLiteralAccess().getGroup(), "rule__WildcardClassLiteral__Group__0");
					put(grammarAccess.getWildcardClassLiteralAccess().getGroup_1(), "rule__WildcardClassLiteral__Group_1__0");
					put(grammarAccess.getWildcardPrimitiveTypeAccess().getGroup_0(), "rule__WildcardPrimitiveType__Group_0__0");
					put(grammarAccess.getWildcardPrimitiveTypeAccess().getGroup_1(), "rule__WildcardPrimitiveType__Group_1__0");
					put(grammarAccess.getWildcardPrimitiveTypeAccess().getGroup_2(), "rule__WildcardPrimitiveType__Group_2__0");
					put(grammarAccess.getWildcardPrimitiveTypeAccess().getGroup_3(), "rule__WildcardPrimitiveType__Group_3__0");
					put(grammarAccess.getWildcardPrimitiveTypeAccess().getGroup_4(), "rule__WildcardPrimitiveType__Group_4__0");
					put(grammarAccess.getWildcardPrimitiveTypeAccess().getGroup_5(), "rule__WildcardPrimitiveType__Group_5__0");
					put(grammarAccess.getWildcardPrimitiveTypeAccess().getGroup_6(), "rule__WildcardPrimitiveType__Group_6__0");
					put(grammarAccess.getWildcardPrimitiveTypeAccess().getGroup_7(), "rule__WildcardPrimitiveType__Group_7__0");
					put(grammarAccess.getWildcardPrimitiveTypeAccess().getGroup_8(), "rule__WildcardPrimitiveType__Group_8__0");
					put(grammarAccess.getWildcardNullAccess().getGroup(), "rule__WildcardNull__Group__0");
					put(grammarAccess.getWildcardNewAccess().getGroup(), "rule__WildcardNew__Group__0");
					put(grammarAccess.getWildcardNewAccess().getGroup_3(), "rule__WildcardNew__Group_3__0");
					put(grammarAccess.getWildcardNewAccess().getGroup_3_1(), "rule__WildcardNew__Group_3_1__0");
					put(grammarAccess.getWildcardQNameTerminalAccess().getGroup(), "rule__WildcardQNameTerminal__Group__0");
					put(grammarAccess.getWildcardQNameTerminalAccess().getGroup_1(), "rule__WildcardQNameTerminal__Group_1__0");
					put(grammarAccess.getWildcardCallAccess().getGroup(), "rule__WildcardCall__Group__0");
					put(grammarAccess.getWildcardCallAccess().getGroup_3(), "rule__WildcardCall__Group_3__0");
					put(grammarAccess.getWildcardCallAccess().getGroup_3_1(), "rule__WildcardCall__Group_3_1__0");
					put(grammarAccess.getWildcardFieldAccess().getGroup(), "rule__WildcardField__Group__0");
					put(grammarAccess.getQNameAccess().getGroup(), "rule__QName__Group__0");
					put(grammarAccess.getQNameAccess().getGroup_1(), "rule__QName__Group_1__0");
					put(grammarAccess.getTransformationAccess().getPatternAssignment_2(), "rule__Transformation__PatternAssignment_2");
					put(grammarAccess.getTransformationAccess().getReplacementAssignment_5(), "rule__Transformation__ReplacementAssignment_5");
					put(grammarAccess.getTransformationAccess().getConditionAssignment_7_1(), "rule__Transformation__ConditionAssignment_7_1");
					put(grammarAccess.getSequencePatternAccess().getSequenceAssignment(), "rule__SequencePattern__SequenceAssignment");
					put(grammarAccess.getMethodPatternAccess().getMethodAssignment(), "rule__MethodPattern__MethodAssignment");
					put(grammarAccess.getTypePatternAccess().getTypeAssignment(), "rule__TypePattern__TypeAssignment");
					put(grammarAccess.getReplacementAccess().getSequenceAssignment_0(), "rule__Replacement__SequenceAssignment_0");
					put(grammarAccess.getReplacementAccess().getMethodAssignment_1(), "rule__Replacement__MethodAssignment_1");
					put(grammarAccess.getReplacementAccess().getTypeAssignment_2(), "rule__Replacement__TypeAssignment_2");
					put(grammarAccess.getTypeAccess().getVisibilityAssignment_0(), "rule__Type__VisibilityAssignment_0");
					put(grammarAccess.getTypeAccess().getClassAssignment_1_0(), "rule__Type__ClassAssignment_1_0");
					put(grammarAccess.getTypeAccess().getInterfaceAssignment_1_1(), "rule__Type__InterfaceAssignment_1_1");
					put(grammarAccess.getTypeAccess().getNameAssignment_2(), "rule__Type__NameAssignment_2");
					put(grammarAccess.getTypeAccess().getSuperClassAssignment_3_1(), "rule__Type__SuperClassAssignment_3_1");
					put(grammarAccess.getTypeAccess().getInterfacesAssignment_4_1(), "rule__Type__InterfacesAssignment_4_1");
					put(grammarAccess.getTypeAccess().getInterfacesAssignment_4_2_1(), "rule__Type__InterfacesAssignment_4_2_1");
					put(grammarAccess.getTypeAccess().getFieldsAssignment_6(), "rule__Type__FieldsAssignment_6");
					put(grammarAccess.getTypeAccess().getMethodsAssignment_7(), "rule__Type__MethodsAssignment_7");
					put(grammarAccess.getFieldAccess().getVisibilityAssignment_0(), "rule__Field__VisibilityAssignment_0");
					put(grammarAccess.getFieldAccess().getStaticAssignment_1(), "rule__Field__StaticAssignment_1");
					put(grammarAccess.getFieldAccess().getTypeAssignment_2(), "rule__Field__TypeAssignment_2");
					put(grammarAccess.getFieldAccess().getNameAssignment_3(), "rule__Field__NameAssignment_3");
					put(grammarAccess.getMethodAccess().getVisibilityAssignment_0(), "rule__Method__VisibilityAssignment_0");
					put(grammarAccess.getMethodAccess().getStaticAssignment_1(), "rule__Method__StaticAssignment_1");
					put(grammarAccess.getMethodAccess().getTypeAssignment_2(), "rule__Method__TypeAssignment_2");
					put(grammarAccess.getMethodAccess().getNameAssignment_3(), "rule__Method__NameAssignment_3");
					put(grammarAccess.getMethodAccess().getParametersAssignment_5_0(), "rule__Method__ParametersAssignment_5_0");
					put(grammarAccess.getMethodAccess().getParametersAssignment_5_1_1(), "rule__Method__ParametersAssignment_5_1_1");
					put(grammarAccess.getMethodAccess().getBodyAssignment_7(), "rule__Method__BodyAssignment_7");
					put(grammarAccess.getBodyAccess().getDeclarationsAssignment_2(), "rule__Body__DeclarationsAssignment_2");
					put(grammarAccess.getBodyAccess().getStatementsAssignment_3(), "rule__Body__StatementsAssignment_3");
					put(grammarAccess.getStatementSequenceAccess().getStatementsAssignment(), "rule__StatementSequence__StatementsAssignment");
					put(grammarAccess.getDeclarationAccess().getTypeAssignment_0(), "rule__Declaration__TypeAssignment_0");
					put(grammarAccess.getDeclarationAccess().getLocalsAssignment_1(), "rule__Declaration__LocalsAssignment_1");
					put(grammarAccess.getDeclarationAccess().getLocalsAssignment_2_1(), "rule__Declaration__LocalsAssignment_2_1");
					put(grammarAccess.getLabelAccess().getNameAssignment_0(), "rule__Label__NameAssignment_0");
					put(grammarAccess.getAssignStmtAccess().getLhsAssignment_0(), "rule__AssignStmt__LhsAssignment_0");
					put(grammarAccess.getAssignStmtAccess().getRhsAssignment_2(), "rule__AssignStmt__RhsAssignment_2");
					put(grammarAccess.getIdentityStmtAccess().getLhsAssignment_0(), "rule__IdentityStmt__LhsAssignment_0");
					put(grammarAccess.getIdentityStmtAccess().getRhsAssignment_2(), "rule__IdentityStmt__RhsAssignment_2");
					put(grammarAccess.getGotoStmtAccess().getTargetAssignment_1(), "rule__GotoStmt__TargetAssignment_1");
					put(grammarAccess.getIfStmtAccess().getConditionAssignment_1(), "rule__IfStmt__ConditionAssignment_1");
					put(grammarAccess.getIfStmtAccess().getThenAssignment_2(), "rule__IfStmt__ThenAssignment_2");
					put(grammarAccess.getInvokeStmtAccess().getInvokeExprAssignment(), "rule__InvokeStmt__InvokeExprAssignment");
					put(grammarAccess.getTableSwitchStmtAccess().getKeyAssignment_2(), "rule__TableSwitchStmt__KeyAssignment_2");
					put(grammarAccess.getTableSwitchStmtAccess().getCasesAssignment_5_0(), "rule__TableSwitchStmt__CasesAssignment_5_0");
					put(grammarAccess.getTableSwitchStmtAccess().getDefaultAssignment_8(), "rule__TableSwitchStmt__DefaultAssignment_8");
					put(grammarAccess.getEnterMonitorStmtAccess().getOperandAssignment_1(), "rule__EnterMonitorStmt__OperandAssignment_1");
					put(grammarAccess.getExitMonitorStmtAccess().getOperandAssignment_1(), "rule__ExitMonitorStmt__OperandAssignment_1");
					put(grammarAccess.getRetStmtAccess().getTargetAssignment_1(), "rule__RetStmt__TargetAssignment_1");
					put(grammarAccess.getReturnStmtAccess().getOperandAssignment_1(), "rule__ReturnStmt__OperandAssignment_1");
					put(grammarAccess.getCaseAccess().getValueAssignment_1(), "rule__Case__ValueAssignment_1");
					put(grammarAccess.getCaseAccess().getTargetAssignment_3(), "rule__Case__TargetAssignment_3");
					put(grammarAccess.getThrowStmtAccess().getOperandAssignment_1(), "rule__ThrowStmt__OperandAssignment_1");
					put(grammarAccess.getAddExprAccess().getLeftOpAssignment_0(), "rule__AddExpr__LeftOpAssignment_0");
					put(grammarAccess.getAddExprAccess().getRightOpAssignment_2(), "rule__AddExpr__RightOpAssignment_2");
					put(grammarAccess.getAndExprAccess().getLeftOpAssignment_0(), "rule__AndExpr__LeftOpAssignment_0");
					put(grammarAccess.getAndExprAccess().getRightOpAssignment_2(), "rule__AndExpr__RightOpAssignment_2");
					put(grammarAccess.getCmpExprAccess().getLeftOpAssignment_0(), "rule__CmpExpr__LeftOpAssignment_0");
					put(grammarAccess.getCmpExprAccess().getRightOpAssignment_2(), "rule__CmpExpr__RightOpAssignment_2");
					put(grammarAccess.getCmpgExprAccess().getLeftOpAssignment_0(), "rule__CmpgExpr__LeftOpAssignment_0");
					put(grammarAccess.getCmpgExprAccess().getRightOpAssignment_2(), "rule__CmpgExpr__RightOpAssignment_2");
					put(grammarAccess.getCmplExprAccess().getLeftOpAssignment_0(), "rule__CmplExpr__LeftOpAssignment_0");
					put(grammarAccess.getCmplExprAccess().getRightOpAssignment_2(), "rule__CmplExpr__RightOpAssignment_2");
					put(grammarAccess.getDivExprAccess().getLeftOpAssignment_0(), "rule__DivExpr__LeftOpAssignment_0");
					put(grammarAccess.getDivExprAccess().getRightOpAssignment_2(), "rule__DivExpr__RightOpAssignment_2");
					put(grammarAccess.getMulExprAccess().getLeftOpAssignment_0(), "rule__MulExpr__LeftOpAssignment_0");
					put(grammarAccess.getMulExprAccess().getRightOpAssignment_2(), "rule__MulExpr__RightOpAssignment_2");
					put(grammarAccess.getOrExprAccess().getLeftOpAssignment_0(), "rule__OrExpr__LeftOpAssignment_0");
					put(grammarAccess.getOrExprAccess().getRightOpAssignment_2(), "rule__OrExpr__RightOpAssignment_2");
					put(grammarAccess.getRemExprAccess().getLeftOpAssignment_0(), "rule__RemExpr__LeftOpAssignment_0");
					put(grammarAccess.getRemExprAccess().getRightOpAssignment_2(), "rule__RemExpr__RightOpAssignment_2");
					put(grammarAccess.getShlExprAccess().getLeftOpAssignment_0(), "rule__ShlExpr__LeftOpAssignment_0");
					put(grammarAccess.getShlExprAccess().getRightOpAssignment_2(), "rule__ShlExpr__RightOpAssignment_2");
					put(grammarAccess.getShrExprAccess().getLeftOpAssignment_0(), "rule__ShrExpr__LeftOpAssignment_0");
					put(grammarAccess.getShrExprAccess().getRightOpAssignment_2(), "rule__ShrExpr__RightOpAssignment_2");
					put(grammarAccess.getSubExprAccess().getLeftOpAssignment_0(), "rule__SubExpr__LeftOpAssignment_0");
					put(grammarAccess.getSubExprAccess().getRightOpAssignment_2(), "rule__SubExpr__RightOpAssignment_2");
					put(grammarAccess.getUshrExprAccess().getLeftOpAssignment_0(), "rule__UshrExpr__LeftOpAssignment_0");
					put(grammarAccess.getUshrExprAccess().getRightOpAssignment_2(), "rule__UshrExpr__RightOpAssignment_2");
					put(grammarAccess.getXorExprAccess().getLeftOpAssignment_0(), "rule__XorExpr__LeftOpAssignment_0");
					put(grammarAccess.getXorExprAccess().getRightOpAssignment_2(), "rule__XorExpr__RightOpAssignment_2");
					put(grammarAccess.getEqExprAccess().getLeftOpAssignment_0(), "rule__EqExpr__LeftOpAssignment_0");
					put(grammarAccess.getEqExprAccess().getRightOpAssignment_2(), "rule__EqExpr__RightOpAssignment_2");
					put(grammarAccess.getGeExprAccess().getLeftOpAssignment_0(), "rule__GeExpr__LeftOpAssignment_0");
					put(grammarAccess.getGeExprAccess().getRightOpAssignment_2(), "rule__GeExpr__RightOpAssignment_2");
					put(grammarAccess.getGtExprAccess().getLeftOpAssignment_0(), "rule__GtExpr__LeftOpAssignment_0");
					put(grammarAccess.getGtExprAccess().getRightOpAssignment_2(), "rule__GtExpr__RightOpAssignment_2");
					put(grammarAccess.getLeExprAccess().getLeftOpAssignment_0(), "rule__LeExpr__LeftOpAssignment_0");
					put(grammarAccess.getLeExprAccess().getRightOpAssignment_2(), "rule__LeExpr__RightOpAssignment_2");
					put(grammarAccess.getLtExprAccess().getLeftOpAssignment_0(), "rule__LtExpr__LeftOpAssignment_0");
					put(grammarAccess.getLtExprAccess().getRightOpAssignment_2(), "rule__LtExpr__RightOpAssignment_2");
					put(grammarAccess.getNeExprAccess().getLeftOpAssignment_0(), "rule__NeExpr__LeftOpAssignment_0");
					put(grammarAccess.getNeExprAccess().getRightOpAssignment_2(), "rule__NeExpr__RightOpAssignment_2");
					put(grammarAccess.getCastExprAccess().getTypeAssignment_1(), "rule__CastExpr__TypeAssignment_1");
					put(grammarAccess.getCastExprAccess().getOperandAssignment_3(), "rule__CastExpr__OperandAssignment_3");
					put(grammarAccess.getInstanceOfExprAccess().getOperandAssignment_0(), "rule__InstanceOfExpr__OperandAssignment_0");
					put(grammarAccess.getInstanceOfExprAccess().getTypeAssignment_2(), "rule__InstanceOfExpr__TypeAssignment_2");
					put(grammarAccess.getSootMethodRefAccess().getClassAssignment_1(), "rule__SootMethodRef__ClassAssignment_1");
					put(grammarAccess.getSootMethodRefAccess().getTypeAssignment_3(), "rule__SootMethodRef__TypeAssignment_3");
					put(grammarAccess.getSootMethodRefAccess().getNameAssignment_4(), "rule__SootMethodRef__NameAssignment_4");
					put(grammarAccess.getSootMethodRefAccess().getParametersAssignment_6_0(), "rule__SootMethodRef__ParametersAssignment_6_0");
					put(grammarAccess.getSootMethodRefAccess().getParametersAssignment_6_1_1(), "rule__SootMethodRef__ParametersAssignment_6_1_1");
					put(grammarAccess.getStaticInvokeExprAccess().getMethodAssignment_2(), "rule__StaticInvokeExpr__MethodAssignment_2");
					put(grammarAccess.getStaticInvokeExprAccess().getParametersAssignment_4_0(), "rule__StaticInvokeExpr__ParametersAssignment_4_0");
					put(grammarAccess.getStaticInvokeExprAccess().getParametersAssignment_4_1_1(), "rule__StaticInvokeExpr__ParametersAssignment_4_1_1");
					put(grammarAccess.getInterfaceInvokeExprAccess().getBaseAssignment_1(), "rule__InterfaceInvokeExpr__BaseAssignment_1");
					put(grammarAccess.getInterfaceInvokeExprAccess().getMethodAssignment_3(), "rule__InterfaceInvokeExpr__MethodAssignment_3");
					put(grammarAccess.getInterfaceInvokeExprAccess().getParametersAssignment_5_0(), "rule__InterfaceInvokeExpr__ParametersAssignment_5_0");
					put(grammarAccess.getInterfaceInvokeExprAccess().getParametersAssignment_5_1_1(), "rule__InterfaceInvokeExpr__ParametersAssignment_5_1_1");
					put(grammarAccess.getSpecialInvokeExprAccess().getBaseAssignment_1(), "rule__SpecialInvokeExpr__BaseAssignment_1");
					put(grammarAccess.getSpecialInvokeExprAccess().getMethodAssignment_3(), "rule__SpecialInvokeExpr__MethodAssignment_3");
					put(grammarAccess.getSpecialInvokeExprAccess().getParametersAssignment_5_0(), "rule__SpecialInvokeExpr__ParametersAssignment_5_0");
					put(grammarAccess.getSpecialInvokeExprAccess().getParametersAssignment_5_1_1(), "rule__SpecialInvokeExpr__ParametersAssignment_5_1_1");
					put(grammarAccess.getVirtualInvokeExprAccess().getBaseAssignment_1(), "rule__VirtualInvokeExpr__BaseAssignment_1");
					put(grammarAccess.getVirtualInvokeExprAccess().getMethodAssignment_3(), "rule__VirtualInvokeExpr__MethodAssignment_3");
					put(grammarAccess.getVirtualInvokeExprAccess().getParametersAssignment_5_0(), "rule__VirtualInvokeExpr__ParametersAssignment_5_0");
					put(grammarAccess.getVirtualInvokeExprAccess().getParametersAssignment_5_1_1(), "rule__VirtualInvokeExpr__ParametersAssignment_5_1_1");
					put(grammarAccess.getNewArrayExprAccess().getTypeAssignment_2(), "rule__NewArrayExpr__TypeAssignment_2");
					put(grammarAccess.getNewArrayExprAccess().getSizeAssignment_4(), "rule__NewArrayExpr__SizeAssignment_4");
					put(grammarAccess.getNewExprAccess().getTypeAssignment_1(), "rule__NewExpr__TypeAssignment_1");
					put(grammarAccess.getNewMultiArrayExprAccess().getTypeAssignment_2(), "rule__NewMultiArrayExpr__TypeAssignment_2");
					put(grammarAccess.getNewMultiArrayExprAccess().getSizeAssignment_4(), "rule__NewMultiArrayExpr__SizeAssignment_4");
					put(grammarAccess.getNewMultiArrayExprAccess().getEmptySizeAssignment_5(), "rule__NewMultiArrayExpr__EmptySizeAssignment_5");
					put(grammarAccess.getDimensionAccess().getSizeAssignment_1(), "rule__Dimension__SizeAssignment_1");
					put(grammarAccess.getLengthExprAccess().getOperandAssignment_1(), "rule__LengthExpr__OperandAssignment_1");
					put(grammarAccess.getNegExprAccess().getOperandAssignment_1(), "rule__NegExpr__OperandAssignment_1");
					put(grammarAccess.getLocalAccess().getNameAssignment(), "rule__Local__NameAssignment");
					put(grammarAccess.getParameterRefAccess().getNameAssignment_1(), "rule__ParameterRef__NameAssignment_1");
					put(grammarAccess.getParameterRefAccess().getTypeAssignment_3(), "rule__ParameterRef__TypeAssignment_3");
					put(grammarAccess.getThisRefAccess().getTypeAssignment_3(), "rule__ThisRef__TypeAssignment_3");
					put(grammarAccess.getArrayRefAccess().getBaseAssignment_0(), "rule__ArrayRef__BaseAssignment_0");
					put(grammarAccess.getArrayRefAccess().getIndexAssignment_2(), "rule__ArrayRef__IndexAssignment_2");
					put(grammarAccess.getStaticFieldRefAccess().getFieldRefAssignment(), "rule__StaticFieldRef__FieldRefAssignment");
					put(grammarAccess.getSootFieldRefAccess().getClassAssignment_1(), "rule__SootFieldRef__ClassAssignment_1");
					put(grammarAccess.getSootFieldRefAccess().getTypeAssignment_3(), "rule__SootFieldRef__TypeAssignment_3");
					put(grammarAccess.getSootFieldRefAccess().getNameAssignment_4(), "rule__SootFieldRef__NameAssignment_4");
					put(grammarAccess.getInstanceFieldRefAccess().getBaseAssignment_0(), "rule__InstanceFieldRef__BaseAssignment_0");
					put(grammarAccess.getInstanceFieldRefAccess().getFieldRefAssignment_2(), "rule__InstanceFieldRef__FieldRefAssignment_2");
					put(grammarAccess.getClassConstantAccess().getNameAssignment_1(), "rule__ClassConstant__NameAssignment_1");
					put(grammarAccess.getQualifiedNameWildcardAccess().getNameAssignment_1(), "rule__QualifiedNameWildcard__NameAssignment_1");
					put(grammarAccess.getIntConstantAccess().getValueAssignment(), "rule__IntConstant__ValueAssignment");
					put(grammarAccess.getLongConstantAccess().getValueAssignment_0(), "rule__LongConstant__ValueAssignment_0");
					put(grammarAccess.getDoubleConstantAccess().getValueAssignment_0(), "rule__DoubleConstant__ValueAssignment_0");
					put(grammarAccess.getFloatConstantAccess().getValueAssignment_0(), "rule__FloatConstant__ValueAssignment_0");
					put(grammarAccess.getStringConstantAccess().getValueAssignment(), "rule__StringConstant__ValueAssignment");
					put(grammarAccess.getQualifiedNameAccess().getNameAssignment(), "rule__QualifiedName__NameAssignment");
					put(grammarAccess.getWildcardAccess().getExpressionAssignment_1(), "rule__Wildcard__ExpressionAssignment_1");
					put(grammarAccess.getWildcardNameAccess().getWNameAssignment_1(), "rule__WildcardName__WNameAssignment_1");
					put(grammarAccess.getWildcardExpressionAccess().getExpressionAssignment(), "rule__WildcardExpression__ExpressionAssignment");
					put(grammarAccess.getWildcardConditionalOrExpressionAccess().getOperandsAssignment_0(), "rule__WildcardConditionalOrExpression__OperandsAssignment_0");
					put(grammarAccess.getWildcardConditionalOrExpressionAccess().getOperandsAssignment_1_1(), "rule__WildcardConditionalOrExpression__OperandsAssignment_1_1");
					put(grammarAccess.getWildcardConditionalAndExpressionAccess().getOperandsAssignment_0(), "rule__WildcardConditionalAndExpression__OperandsAssignment_0");
					put(grammarAccess.getWildcardConditionalAndExpressionAccess().getOperandsAssignment_1_1(), "rule__WildcardConditionalAndExpression__OperandsAssignment_1_1");
					put(grammarAccess.getWildcardEqualityExpressionAccess().getOperandsAssignment_0(), "rule__WildcardEqualityExpression__OperandsAssignment_0");
					put(grammarAccess.getWildcardEqualityExpressionAccess().getOperatorAssignment_1_0_0(), "rule__WildcardEqualityExpression__OperatorAssignment_1_0_0");
					put(grammarAccess.getWildcardEqualityExpressionAccess().getOperatorAssignment_1_0_1(), "rule__WildcardEqualityExpression__OperatorAssignment_1_0_1");
					put(grammarAccess.getWildcardEqualityExpressionAccess().getOperandsAssignment_1_1(), "rule__WildcardEqualityExpression__OperandsAssignment_1_1");
					put(grammarAccess.getWildcardInstanceOfExpressionAccess().getOperandAssignment_0(), "rule__WildcardInstanceOfExpression__OperandAssignment_0");
					put(grammarAccess.getWildcardInstanceOfExpressionAccess().getTypeAssignment_1_1(), "rule__WildcardInstanceOfExpression__TypeAssignment_1_1");
					put(grammarAccess.getWildcardRelationalExpressionAccess().getOperandsAssignment_0(), "rule__WildcardRelationalExpression__OperandsAssignment_0");
					put(grammarAccess.getWildcardRelationalExpressionAccess().getOperatorsAssignment_1_0(), "rule__WildcardRelationalExpression__OperatorsAssignment_1_0");
					put(grammarAccess.getWildcardRelationalExpressionAccess().getOperandsAssignment_1_1(), "rule__WildcardRelationalExpression__OperandsAssignment_1_1");
					put(grammarAccess.getWildcardAdditiveExpressionAccess().getOperandsAssignment_0(), "rule__WildcardAdditiveExpression__OperandsAssignment_0");
					put(grammarAccess.getWildcardAdditiveExpressionAccess().getOperatorsAssignment_1_0_0(), "rule__WildcardAdditiveExpression__OperatorsAssignment_1_0_0");
					put(grammarAccess.getWildcardAdditiveExpressionAccess().getOperatorsAssignment_1_0_1(), "rule__WildcardAdditiveExpression__OperatorsAssignment_1_0_1");
					put(grammarAccess.getWildcardAdditiveExpressionAccess().getOperandsAssignment_1_1(), "rule__WildcardAdditiveExpression__OperandsAssignment_1_1");
					put(grammarAccess.getWildcardMultiplicativeExpressionAccess().getOperandsAssignment_0(), "rule__WildcardMultiplicativeExpression__OperandsAssignment_0");
					put(grammarAccess.getWildcardMultiplicativeExpressionAccess().getOperatorsAssignment_1_0_0(), "rule__WildcardMultiplicativeExpression__OperatorsAssignment_1_0_0");
					put(grammarAccess.getWildcardMultiplicativeExpressionAccess().getOperatorsAssignment_1_0_1(), "rule__WildcardMultiplicativeExpression__OperatorsAssignment_1_0_1");
					put(grammarAccess.getWildcardMultiplicativeExpressionAccess().getOperatorsAssignment_1_0_2(), "rule__WildcardMultiplicativeExpression__OperatorsAssignment_1_0_2");
					put(grammarAccess.getWildcardMultiplicativeExpressionAccess().getOperandsAssignment_1_1(), "rule__WildcardMultiplicativeExpression__OperandsAssignment_1_1");
					put(grammarAccess.getWildcardUnaryExpressionAccess().getOperatorAssignment_0_0(), "rule__WildcardUnaryExpression__OperatorAssignment_0_0");
					put(grammarAccess.getWildcardUnaryExpressionAccess().getOperandAssignment_0_1(), "rule__WildcardUnaryExpression__OperandAssignment_0_1");
					put(grammarAccess.getWildcardUnaryExpressionAccess().getOperatorAssignment_1_0(), "rule__WildcardUnaryExpression__OperatorAssignment_1_0");
					put(grammarAccess.getWildcardUnaryExpressionAccess().getOperandAssignment_1_1(), "rule__WildcardUnaryExpression__OperandAssignment_1_1");
					put(grammarAccess.getWildcardUnaryExpressionAccess().getOperandAssignment_2(), "rule__WildcardUnaryExpression__OperandAssignment_2");
					put(grammarAccess.getWildcardUnaryExpressionNotPlusMinusAccess().getNotAssignment_0_0(), "rule__WildcardUnaryExpressionNotPlusMinus__NotAssignment_0_0");
					put(grammarAccess.getWildcardUnaryExpressionNotPlusMinusAccess().getOperandAssignment_0_1(), "rule__WildcardUnaryExpressionNotPlusMinus__OperandAssignment_0_1");
					put(grammarAccess.getWildcardUnaryExpressionNotPlusMinusAccess().getOperandAssignment_1_0(), "rule__WildcardUnaryExpressionNotPlusMinus__OperandAssignment_1_0");
					put(grammarAccess.getWildcardUnaryExpressionNotPlusMinusAccess().getDereferencesAssignment_1_1(), "rule__WildcardUnaryExpressionNotPlusMinus__DereferencesAssignment_1_1");
					put(grammarAccess.getWildcardParExpressionAccess().getExpressionAssignment_1(), "rule__WildcardParExpression__ExpressionAssignment_1");
					put(grammarAccess.getWildcardClassLiteralAccess().getBaseTypeAssignment_0(), "rule__WildcardClassLiteral__BaseTypeAssignment_0");
					put(grammarAccess.getWildcardClassLiteralAccess().getDimensionAssignment_1_0(), "rule__WildcardClassLiteral__DimensionAssignment_1_0");
					put(grammarAccess.getWildcardClassLiteralAccess().getDimensionAssignment_1_1(), "rule__WildcardClassLiteral__DimensionAssignment_1_1");
					put(grammarAccess.getWildcardBooleanAccess().getValueAssignment_0(), "rule__WildcardBoolean__ValueAssignment_0");
					put(grammarAccess.getWildcardBooleanAccess().getValueAssignment_1(), "rule__WildcardBoolean__ValueAssignment_1");
					put(grammarAccess.getWildcardIntAccess().getValueAssignment(), "rule__WildcardInt__ValueAssignment");
					put(grammarAccess.getWildcardStringAccess().getValueAssignment(), "rule__WildcardString__ValueAssignment");
					put(grammarAccess.getWildcardNewAccess().getNameAssignment_1(), "rule__WildcardNew__NameAssignment_1");
					put(grammarAccess.getWildcardNewAccess().getParametersAssignment_3_0(), "rule__WildcardNew__ParametersAssignment_3_0");
					put(grammarAccess.getWildcardNewAccess().getParametersAssignment_3_1_1(), "rule__WildcardNew__ParametersAssignment_3_1_1");
					put(grammarAccess.getWildcardQNameAccess().getNameAssignment(), "rule__WildcardQName__NameAssignment");
					put(grammarAccess.getWildcardCallAccess().getNameAssignment_1(), "rule__WildcardCall__NameAssignment_1");
					put(grammarAccess.getWildcardCallAccess().getParametersAssignment_3_0(), "rule__WildcardCall__ParametersAssignment_3_0");
					put(grammarAccess.getWildcardCallAccess().getParametersAssignment_3_1_1(), "rule__WildcardCall__ParametersAssignment_3_1_1");
					put(grammarAccess.getWildcardFieldAccess().getNameAssignment_1(), "rule__WildcardField__NameAssignment_1");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			soot.jimple.toolkits.transformation.dsl.ui.contentassist.antlr.internal.InternalTransformationLanguageParser typedParser = (soot.jimple.toolkits.transformation.dsl.ui.contentassist.antlr.internal.InternalTransformationLanguageParser) parser;
			typedParser.entryRuleTransformation();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public TransformationLanguageGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(TransformationLanguageGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
