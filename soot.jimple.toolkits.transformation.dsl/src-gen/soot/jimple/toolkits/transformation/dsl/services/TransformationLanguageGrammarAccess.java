/*
* generated by Xtext
*/

package soot.jimple.toolkits.transformation.dsl.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class TransformationLanguageGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class TransformationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Transformation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTransformationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cReplaceKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPatternAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPatternPatternParserRuleCall_2_0 = (RuleCall)cPatternAssignment_2.eContents().get(0);
		private final Keyword cEndKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cByKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cReplacementAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cReplacementReplacementParserRuleCall_5_0 = (RuleCall)cReplacementAssignment_5.eContents().get(0);
		private final Keyword cEndKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cEndKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Transformation:
		//	"«transformation»" "«replace»" pattern=Pattern "«end»" "«by»" replacement=Replacement "«end»" "«end»";
		public ParserRule getRule() { return rule; }

		//"«transformation»" "«replace»" pattern=Pattern "«end»" "«by»" replacement=Replacement "«end»" "«end»"
		public Group getGroup() { return cGroup; }

		//"«transformation»"
		public Keyword getTransformationKeyword_0() { return cTransformationKeyword_0; }

		//"«replace»"
		public Keyword getReplaceKeyword_1() { return cReplaceKeyword_1; }

		//pattern=Pattern
		public Assignment getPatternAssignment_2() { return cPatternAssignment_2; }

		//Pattern
		public RuleCall getPatternPatternParserRuleCall_2_0() { return cPatternPatternParserRuleCall_2_0; }

		//"«end»"
		public Keyword getEndKeyword_3() { return cEndKeyword_3; }

		//"«by»"
		public Keyword getByKeyword_4() { return cByKeyword_4; }

		//replacement=Replacement
		public Assignment getReplacementAssignment_5() { return cReplacementAssignment_5; }

		//Replacement
		public RuleCall getReplacementReplacementParserRuleCall_5_0() { return cReplacementReplacementParserRuleCall_5_0; }

		//"«end»"
		public Keyword getEndKeyword_6() { return cEndKeyword_6; }

		//"«end»"
		public Keyword getEndKeyword_7() { return cEndKeyword_7; }
	}

	public class PatternElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Pattern");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSequencePatternParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMethodPatternParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cTypePatternParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Pattern:
		//	SequencePattern | MethodPattern | TypePattern;
		public ParserRule getRule() { return rule; }

		//SequencePattern | MethodPattern | TypePattern
		public Alternatives getAlternatives() { return cAlternatives; }

		//SequencePattern
		public RuleCall getSequencePatternParserRuleCall_0() { return cSequencePatternParserRuleCall_0; }

		//MethodPattern
		public RuleCall getMethodPatternParserRuleCall_1() { return cMethodPatternParserRuleCall_1; }

		//TypePattern
		public RuleCall getTypePatternParserRuleCall_2() { return cTypePatternParserRuleCall_2; }
	}

	public class SequencePatternElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SequencePattern");
		private final Assignment cSequenceAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cSequenceStatementSequenceParserRuleCall_0 = (RuleCall)cSequenceAssignment.eContents().get(0);
		
		//SequencePattern:
		//	sequence=StatementSequence;
		public ParserRule getRule() { return rule; }

		//sequence=StatementSequence
		public Assignment getSequenceAssignment() { return cSequenceAssignment; }

		//StatementSequence
		public RuleCall getSequenceStatementSequenceParserRuleCall_0() { return cSequenceStatementSequenceParserRuleCall_0; }
	}

	public class MethodPatternElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MethodPattern");
		private final Assignment cMethodAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cMethodMethodParserRuleCall_0 = (RuleCall)cMethodAssignment.eContents().get(0);
		
		//MethodPattern:
		//	method=Method;
		public ParserRule getRule() { return rule; }

		//method=Method
		public Assignment getMethodAssignment() { return cMethodAssignment; }

		//Method
		public RuleCall getMethodMethodParserRuleCall_0() { return cMethodMethodParserRuleCall_0; }
	}

	public class TypePatternElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypePattern");
		private final Assignment cTypeAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cTypeTypeParserRuleCall_0 = (RuleCall)cTypeAssignment.eContents().get(0);
		
		//TypePattern:
		//	type=Type;
		public ParserRule getRule() { return rule; }

		//type=Type
		public Assignment getTypeAssignment() { return cTypeAssignment; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_0() { return cTypeTypeParserRuleCall_0; }
	}

	public class ReplacementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Replacement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cSequenceAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cSequenceStatementSequenceParserRuleCall_0_0 = (RuleCall)cSequenceAssignment_0.eContents().get(0);
		private final Assignment cMethodAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cMethodMethodParserRuleCall_1_0 = (RuleCall)cMethodAssignment_1.eContents().get(0);
		private final Assignment cTypeAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cTypeTypeParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		
		//Replacement:
		//	sequence=StatementSequence | method=Method | type=Type;
		public ParserRule getRule() { return rule; }

		//sequence=StatementSequence | method=Method | type=Type
		public Alternatives getAlternatives() { return cAlternatives; }

		//sequence=StatementSequence
		public Assignment getSequenceAssignment_0() { return cSequenceAssignment_0; }

		//StatementSequence
		public RuleCall getSequenceStatementSequenceParserRuleCall_0_0() { return cSequenceStatementSequenceParserRuleCall_0_0; }

		//method=Method
		public Assignment getMethodAssignment_1() { return cMethodAssignment_1; }

		//Method
		public RuleCall getMethodMethodParserRuleCall_1_0() { return cMethodMethodParserRuleCall_1_0; }

		//type=Type
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_2_0() { return cTypeTypeParserRuleCall_2_0; }
	}

	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Type");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVisibilityAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVisibilityVisibilityEnumRuleCall_0_0 = (RuleCall)cVisibilityAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cClassAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final Keyword cClassClassKeyword_1_0_0 = (Keyword)cClassAssignment_1_0.eContents().get(0);
		private final Assignment cInterfaceAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final Keyword cInterfaceInterfaceKeyword_1_1_0 = (Keyword)cInterfaceAssignment_1_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameQualifiedNameParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cExtendsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cSuperClassAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cSuperClassQualifiedNameParserRuleCall_3_1_0 = (RuleCall)cSuperClassAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cImplementsKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cInterfacesAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cInterfacesQualifiedNameParserRuleCall_4_1_0 = (RuleCall)cInterfacesAssignment_4_1.eContents().get(0);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Keyword cCommaKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Assignment cInterfacesAssignment_4_2_1 = (Assignment)cGroup_4_2.eContents().get(1);
		private final RuleCall cInterfacesQualifiedNameParserRuleCall_4_2_1_0 = (RuleCall)cInterfacesAssignment_4_2_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cFieldsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cFieldsFieldParserRuleCall_6_0 = (RuleCall)cFieldsAssignment_6.eContents().get(0);
		private final Assignment cMethodsAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cMethodsMethodParserRuleCall_7_0 = (RuleCall)cMethodsAssignment_7.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//// Jimple part
		//Type:
		//	visibility=Visibility? (class?="class" | interface?="interface") name=QualifiedName ("extends"
		//	superClass=QualifiedName)? ("implements" interfaces+=QualifiedName ("," interfaces+=QualifiedName)*)? "{"
		//	fields+=Field* methods+=Method* "}";
		public ParserRule getRule() { return rule; }

		//visibility=Visibility? (class?="class" | interface?="interface") name=QualifiedName ("extends"
		//superClass=QualifiedName)? ("implements" interfaces+=QualifiedName ("," interfaces+=QualifiedName)*)? "{"
		//fields+=Field* methods+=Method* "}"
		public Group getGroup() { return cGroup; }

		//visibility=Visibility?
		public Assignment getVisibilityAssignment_0() { return cVisibilityAssignment_0; }

		//Visibility
		public RuleCall getVisibilityVisibilityEnumRuleCall_0_0() { return cVisibilityVisibilityEnumRuleCall_0_0; }

		//class?="class" | interface?="interface"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//class?="class"
		public Assignment getClassAssignment_1_0() { return cClassAssignment_1_0; }

		//"class"
		public Keyword getClassClassKeyword_1_0_0() { return cClassClassKeyword_1_0_0; }

		//interface?="interface"
		public Assignment getInterfaceAssignment_1_1() { return cInterfaceAssignment_1_1; }

		//"interface"
		public Keyword getInterfaceInterfaceKeyword_1_1_0() { return cInterfaceInterfaceKeyword_1_1_0; }

		//name=QualifiedName
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_2_0() { return cNameQualifiedNameParserRuleCall_2_0; }

		//("extends" superClass=QualifiedName)?
		public Group getGroup_3() { return cGroup_3; }

		//"extends"
		public Keyword getExtendsKeyword_3_0() { return cExtendsKeyword_3_0; }

		//superClass=QualifiedName
		public Assignment getSuperClassAssignment_3_1() { return cSuperClassAssignment_3_1; }

		//QualifiedName
		public RuleCall getSuperClassQualifiedNameParserRuleCall_3_1_0() { return cSuperClassQualifiedNameParserRuleCall_3_1_0; }

		//("implements" interfaces+=QualifiedName ("," interfaces+=QualifiedName)*)?
		public Group getGroup_4() { return cGroup_4; }

		//"implements"
		public Keyword getImplementsKeyword_4_0() { return cImplementsKeyword_4_0; }

		//interfaces+=QualifiedName
		public Assignment getInterfacesAssignment_4_1() { return cInterfacesAssignment_4_1; }

		//QualifiedName
		public RuleCall getInterfacesQualifiedNameParserRuleCall_4_1_0() { return cInterfacesQualifiedNameParserRuleCall_4_1_0; }

		//("," interfaces+=QualifiedName)*
		public Group getGroup_4_2() { return cGroup_4_2; }

		//","
		public Keyword getCommaKeyword_4_2_0() { return cCommaKeyword_4_2_0; }

		//interfaces+=QualifiedName
		public Assignment getInterfacesAssignment_4_2_1() { return cInterfacesAssignment_4_2_1; }

		//QualifiedName
		public RuleCall getInterfacesQualifiedNameParserRuleCall_4_2_1_0() { return cInterfacesQualifiedNameParserRuleCall_4_2_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }

		//fields+=Field*
		public Assignment getFieldsAssignment_6() { return cFieldsAssignment_6; }

		//Field
		public RuleCall getFieldsFieldParserRuleCall_6_0() { return cFieldsFieldParserRuleCall_6_0; }

		//methods+=Method*
		public Assignment getMethodsAssignment_7() { return cMethodsAssignment_7; }

		//Method
		public RuleCall getMethodsMethodParserRuleCall_7_0() { return cMethodsMethodParserRuleCall_7_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}

	public class FieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Field");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVisibilityAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVisibilityVisibilityEnumRuleCall_0_0 = (RuleCall)cVisibilityAssignment_0.eContents().get(0);
		private final Assignment cStaticAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cStaticStaticKeyword_1_0 = (Keyword)cStaticAssignment_1.eContents().get(0);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeQualifiedNameParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Field:
		//	visibility=Visibility? static?="static" type=QualifiedName name=ID ";";
		public ParserRule getRule() { return rule; }

		//visibility=Visibility? static?="static" type=QualifiedName name=ID ";"
		public Group getGroup() { return cGroup; }

		//visibility=Visibility?
		public Assignment getVisibilityAssignment_0() { return cVisibilityAssignment_0; }

		//Visibility
		public RuleCall getVisibilityVisibilityEnumRuleCall_0_0() { return cVisibilityVisibilityEnumRuleCall_0_0; }

		//static?="static"
		public Assignment getStaticAssignment_1() { return cStaticAssignment_1; }

		//"static"
		public Keyword getStaticStaticKeyword_1_0() { return cStaticStaticKeyword_1_0; }

		//type=QualifiedName
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//QualifiedName
		public RuleCall getTypeQualifiedNameParserRuleCall_2_0() { return cTypeQualifiedNameParserRuleCall_2_0; }

		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class MethodElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Method");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVisibilityAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVisibilityVisibilityEnumRuleCall_0_0 = (RuleCall)cVisibilityAssignment_0.eContents().get(0);
		private final Assignment cStaticAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cStaticStaticKeyword_1_0 = (Keyword)cStaticAssignment_1.eContents().get(0);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeIDTerminalRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameMethodNameParserRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Assignment cParametersAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cParametersQualifiedNameParserRuleCall_5_0_0 = (RuleCall)cParametersAssignment_5_0.eContents().get(0);
		private final Group cGroup_5_1 = (Group)cGroup_5.eContents().get(1);
		private final Keyword cCommaKeyword_5_1_0 = (Keyword)cGroup_5_1.eContents().get(0);
		private final Assignment cParametersAssignment_5_1_1 = (Assignment)cGroup_5_1.eContents().get(1);
		private final RuleCall cParametersQualifiedNameParserRuleCall_5_1_1_0 = (RuleCall)cParametersAssignment_5_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cBodyAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cBodyBodyParserRuleCall_7_0 = (RuleCall)cBodyAssignment_7.eContents().get(0);
		
		//Method:
		//	visibility=Visibility? static?="static"? type=ID name=MethodName "(" (parameters+=QualifiedName (","
		//	parameters+=QualifiedName)*)? ")" body=Body;
		public ParserRule getRule() { return rule; }

		//visibility=Visibility? static?="static"? type=ID name=MethodName "(" (parameters+=QualifiedName (","
		//parameters+=QualifiedName)*)? ")" body=Body
		public Group getGroup() { return cGroup; }

		//visibility=Visibility?
		public Assignment getVisibilityAssignment_0() { return cVisibilityAssignment_0; }

		//Visibility
		public RuleCall getVisibilityVisibilityEnumRuleCall_0_0() { return cVisibilityVisibilityEnumRuleCall_0_0; }

		//static?="static"?
		public Assignment getStaticAssignment_1() { return cStaticAssignment_1; }

		//"static"
		public Keyword getStaticStaticKeyword_1_0() { return cStaticStaticKeyword_1_0; }

		//type=ID
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//ID
		public RuleCall getTypeIDTerminalRuleCall_2_0() { return cTypeIDTerminalRuleCall_2_0; }

		//name=MethodName
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//MethodName
		public RuleCall getNameMethodNameParserRuleCall_3_0() { return cNameMethodNameParserRuleCall_3_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_4() { return cLeftParenthesisKeyword_4; }

		//(parameters+=QualifiedName ("," parameters+=QualifiedName)*)?
		public Group getGroup_5() { return cGroup_5; }

		//parameters+=QualifiedName
		public Assignment getParametersAssignment_5_0() { return cParametersAssignment_5_0; }

		//QualifiedName
		public RuleCall getParametersQualifiedNameParserRuleCall_5_0_0() { return cParametersQualifiedNameParserRuleCall_5_0_0; }

		//("," parameters+=QualifiedName)*
		public Group getGroup_5_1() { return cGroup_5_1; }

		//","
		public Keyword getCommaKeyword_5_1_0() { return cCommaKeyword_5_1_0; }

		//parameters+=QualifiedName
		public Assignment getParametersAssignment_5_1_1() { return cParametersAssignment_5_1_1; }

		//QualifiedName
		public RuleCall getParametersQualifiedNameParserRuleCall_5_1_1_0() { return cParametersQualifiedNameParserRuleCall_5_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }

		//body=Body
		public Assignment getBodyAssignment_7() { return cBodyAssignment_7; }

		//Body
		public RuleCall getBodyBodyParserRuleCall_7_0() { return cBodyBodyParserRuleCall_7_0; }
	}

	public class BodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Body");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBodyAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDeclarationsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDeclarationsDeclarationParserRuleCall_2_0 = (RuleCall)cDeclarationsAssignment_2.eContents().get(0);
		private final Assignment cStatementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cStatementsLabelOrStatementParserRuleCall_3_0 = (RuleCall)cStatementsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Body:
		//	{Body} "{" declarations+=Declaration* statements+=LabelOrStatement* "}";
		public ParserRule getRule() { return rule; }

		//{Body} "{" declarations+=Declaration* statements+=LabelOrStatement* "}"
		public Group getGroup() { return cGroup; }

		//{Body}
		public Action getBodyAction_0() { return cBodyAction_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//declarations+=Declaration*
		public Assignment getDeclarationsAssignment_2() { return cDeclarationsAssignment_2; }

		//Declaration
		public RuleCall getDeclarationsDeclarationParserRuleCall_2_0() { return cDeclarationsDeclarationParserRuleCall_2_0; }

		//statements+=LabelOrStatement*
		public Assignment getStatementsAssignment_3() { return cStatementsAssignment_3; }

		//LabelOrStatement
		public RuleCall getStatementsLabelOrStatementParserRuleCall_3_0() { return cStatementsLabelOrStatementParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class StatementSequenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StatementSequence");
		private final Assignment cStatementsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cStatementsLabelOrStatementParserRuleCall_0 = (RuleCall)cStatementsAssignment.eContents().get(0);
		
		//StatementSequence:
		//	statements+=LabelOrStatement+;
		public ParserRule getRule() { return rule; }

		//statements+=LabelOrStatement+
		public Assignment getStatementsAssignment() { return cStatementsAssignment; }

		//LabelOrStatement
		public RuleCall getStatementsLabelOrStatementParserRuleCall_0() { return cStatementsLabelOrStatementParserRuleCall_0; }
	}

	public class DeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Declaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeQualifiedNameParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cLocalsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLocalsIDTerminalRuleCall_1_0 = (RuleCall)cLocalsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cLocalsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cLocalsIDTerminalRuleCall_2_1_0 = (RuleCall)cLocalsAssignment_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//// 
		//Declaration:
		//	type=QualifiedName locals+=ID ("," locals+=ID)* ";";
		public ParserRule getRule() { return rule; }

		//type=QualifiedName locals+=ID ("," locals+=ID)* ";"
		public Group getGroup() { return cGroup; }

		//type=QualifiedName
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//QualifiedName
		public RuleCall getTypeQualifiedNameParserRuleCall_0_0() { return cTypeQualifiedNameParserRuleCall_0_0; }

		//locals+=ID
		public Assignment getLocalsAssignment_1() { return cLocalsAssignment_1; }

		//ID
		public RuleCall getLocalsIDTerminalRuleCall_1_0() { return cLocalsIDTerminalRuleCall_1_0; }

		//("," locals+=ID)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//locals+=ID
		public Assignment getLocalsAssignment_2_1() { return cLocalsAssignment_2_1; }

		//ID
		public RuleCall getLocalsIDTerminalRuleCall_2_1_0() { return cLocalsIDTerminalRuleCall_2_1_0; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class LabelOrStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LabelOrStatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLabelParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cStatementParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//LabelOrStatement:
		//	Label | Statement ";";
		public ParserRule getRule() { return rule; }

		//Label | Statement ";"
		public Alternatives getAlternatives() { return cAlternatives; }

		//Label
		public RuleCall getLabelParserRuleCall_0() { return cLabelParserRuleCall_0; }

		//Statement ";"
		public Group getGroup_1() { return cGroup_1; }

		//Statement
		public RuleCall getStatementParserRuleCall_1_0() { return cStatementParserRuleCall_1_0; }

		//";"
		public Keyword getSemicolonKeyword_1_1() { return cSemicolonKeyword_1_1; }
	}

	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBreakpointStmtParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDefinitionStmtParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cGotoStmtParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cIfStmtParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cInvokeStmtParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cLookupSwitchStmtParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cMonitorStmtParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cNopStmtParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cRetStmtParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cReturnVoidStmtParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cReturnStmtParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cTableSwitchStmtParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		
		//Statement:
		//	BreakpointStmt | DefinitionStmt | GotoStmt | IfStmt | InvokeStmt | LookupSwitchStmt | MonitorStmt | NopStmt | RetStmt
		//	| ReturnVoidStmt | ReturnStmt | TableSwitchStmt;
		public ParserRule getRule() { return rule; }

		//BreakpointStmt | DefinitionStmt | GotoStmt | IfStmt | InvokeStmt | LookupSwitchStmt | MonitorStmt | NopStmt | RetStmt |
		//ReturnVoidStmt | ReturnStmt | TableSwitchStmt
		public Alternatives getAlternatives() { return cAlternatives; }

		//BreakpointStmt
		public RuleCall getBreakpointStmtParserRuleCall_0() { return cBreakpointStmtParserRuleCall_0; }

		//DefinitionStmt
		public RuleCall getDefinitionStmtParserRuleCall_1() { return cDefinitionStmtParserRuleCall_1; }

		//GotoStmt
		public RuleCall getGotoStmtParserRuleCall_2() { return cGotoStmtParserRuleCall_2; }

		//IfStmt
		public RuleCall getIfStmtParserRuleCall_3() { return cIfStmtParserRuleCall_3; }

		//InvokeStmt
		public RuleCall getInvokeStmtParserRuleCall_4() { return cInvokeStmtParserRuleCall_4; }

		//LookupSwitchStmt
		public RuleCall getLookupSwitchStmtParserRuleCall_5() { return cLookupSwitchStmtParserRuleCall_5; }

		//MonitorStmt
		public RuleCall getMonitorStmtParserRuleCall_6() { return cMonitorStmtParserRuleCall_6; }

		//NopStmt
		public RuleCall getNopStmtParserRuleCall_7() { return cNopStmtParserRuleCall_7; }

		//RetStmt
		public RuleCall getRetStmtParserRuleCall_8() { return cRetStmtParserRuleCall_8; }

		//ReturnVoidStmt
		public RuleCall getReturnVoidStmtParserRuleCall_9() { return cReturnVoidStmtParserRuleCall_9; }

		//ReturnStmt
		public RuleCall getReturnStmtParserRuleCall_10() { return cReturnStmtParserRuleCall_10; }

		//TableSwitchStmt
		public RuleCall getTableSwitchStmtParserRuleCall_11() { return cTableSwitchStmtParserRuleCall_11; }
	}

	public class LabelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Label");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameLABELNAMETerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Label:
		//	name=LABELNAME ":";
		public ParserRule getRule() { return rule; }

		//name=LABELNAME ":"
		public Group getGroup() { return cGroup; }

		//name=LABELNAME
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//LABELNAME
		public RuleCall getNameLABELNAMETerminalRuleCall_0_0() { return cNameLABELNAMETerminalRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
	}

	public class BreakpointStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BreakpointStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBreakpointStmtAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cBreakpointKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//BreakpointStmt:
		//	{BreakpointStmt} "breakpoint";
		public ParserRule getRule() { return rule; }

		//{BreakpointStmt} "breakpoint"
		public Group getGroup() { return cGroup; }

		//{BreakpointStmt}
		public Action getBreakpointStmtAction_0() { return cBreakpointStmtAction_0; }

		//"breakpoint"
		public Keyword getBreakpointKeyword_1() { return cBreakpointKeyword_1; }
	}

	public class DefinitionStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DefinitionStmt");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAssignStmtParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIdentityStmtParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//DefinitionStmt:
		//	AssignStmt | IdentityStmt;
		public ParserRule getRule() { return rule; }

		//AssignStmt | IdentityStmt
		public Alternatives getAlternatives() { return cAlternatives; }

		//AssignStmt
		public RuleCall getAssignStmtParserRuleCall_0() { return cAssignStmtParserRuleCall_0; }

		//IdentityStmt
		public RuleCall getIdentityStmtParserRuleCall_1() { return cIdentityStmtParserRuleCall_1; }
	}

	public class AssignStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AssignStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLhsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLhsRefParserRuleCall_0_0 = (RuleCall)cLhsAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRhsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRhsValueParserRuleCall_2_0 = (RuleCall)cRhsAssignment_2.eContents().get(0);
		
		//AssignStmt:
		//	lhs=Ref "=" rhs=Value;
		public ParserRule getRule() { return rule; }

		//lhs=Ref "=" rhs=Value
		public Group getGroup() { return cGroup; }

		//lhs=Ref
		public Assignment getLhsAssignment_0() { return cLhsAssignment_0; }

		//Ref
		public RuleCall getLhsRefParserRuleCall_0_0() { return cLhsRefParserRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//rhs=Value
		public Assignment getRhsAssignment_2() { return cRhsAssignment_2; }

		//Value
		public RuleCall getRhsValueParserRuleCall_2_0() { return cRhsValueParserRuleCall_2_0; }
	}

	public class IdentityStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IdentityStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLhsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLhsLocalParserRuleCall_0_0 = (RuleCall)cLhsAssignment_0.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRhsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRhsIdentityRefParserRuleCall_2_0 = (RuleCall)cRhsAssignment_2.eContents().get(0);
		
		//IdentityStmt:
		//	lhs=Local ":=" rhs=IdentityRef;
		public ParserRule getRule() { return rule; }

		//lhs=Local ":=" rhs=IdentityRef
		public Group getGroup() { return cGroup; }

		//lhs=Local
		public Assignment getLhsAssignment_0() { return cLhsAssignment_0; }

		//Local
		public RuleCall getLhsLocalParserRuleCall_0_0() { return cLhsLocalParserRuleCall_0_0; }

		//":="
		public Keyword getColonEqualsSignKeyword_1() { return cColonEqualsSignKeyword_1; }

		//rhs=IdentityRef
		public Assignment getRhsAssignment_2() { return cRhsAssignment_2; }

		//IdentityRef
		public RuleCall getRhsIdentityRefParserRuleCall_2_0() { return cRhsIdentityRefParserRuleCall_2_0; }
	}

	public class GotoStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GotoStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGotoKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTargetAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTargetLABELNAMETerminalRuleCall_1_0 = (RuleCall)cTargetAssignment_1.eContents().get(0);
		
		//GotoStmt:
		//	"goto" target=LABELNAME;
		public ParserRule getRule() { return rule; }

		//"goto" target=LABELNAME
		public Group getGroup() { return cGroup; }

		//"goto"
		public Keyword getGotoKeyword_0() { return cGotoKeyword_0; }

		//target=LABELNAME
		public Assignment getTargetAssignment_1() { return cTargetAssignment_1; }

		//LABELNAME
		public RuleCall getTargetLABELNAMETerminalRuleCall_1_0() { return cTargetLABELNAMETerminalRuleCall_1_0; }
	}

	public class IfStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IfStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConditionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConditionConditionalExprParserRuleCall_1_0 = (RuleCall)cConditionAssignment_1.eContents().get(0);
		private final Assignment cThenAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cThenGotoStmtParserRuleCall_2_0 = (RuleCall)cThenAssignment_2.eContents().get(0);
		
		//IfStmt:
		//	"if" condition=ConditionalExpr then=GotoStmt;
		public ParserRule getRule() { return rule; }

		//"if" condition=ConditionalExpr then=GotoStmt
		public Group getGroup() { return cGroup; }

		//"if"
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }

		//condition=ConditionalExpr
		public Assignment getConditionAssignment_1() { return cConditionAssignment_1; }

		//ConditionalExpr
		public RuleCall getConditionConditionalExprParserRuleCall_1_0() { return cConditionConditionalExprParserRuleCall_1_0; }

		//then=GotoStmt
		public Assignment getThenAssignment_2() { return cThenAssignment_2; }

		//GotoStmt
		public RuleCall getThenGotoStmtParserRuleCall_2_0() { return cThenGotoStmtParserRuleCall_2_0; }
	}

	public class InvokeStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InvokeStmt");
		private final Assignment cInvokeExprAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cInvokeExprInvokeExprParserRuleCall_0 = (RuleCall)cInvokeExprAssignment.eContents().get(0);
		
		//InvokeStmt:
		//	invokeExpr=InvokeExpr;
		public ParserRule getRule() { return rule; }

		//invokeExpr=InvokeExpr
		public Assignment getInvokeExprAssignment() { return cInvokeExprAssignment; }

		//InvokeExpr
		public RuleCall getInvokeExprInvokeExprParserRuleCall_0() { return cInvokeExprInvokeExprParserRuleCall_0; }
	}

	public class TableSwitchStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TableSwitchStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTableswitchKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cKeyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cKeyLocalParserRuleCall_2_0 = (RuleCall)cKeyAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Assignment cCasesAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cCasesCaseParserRuleCall_5_0_0 = (RuleCall)cCasesAssignment_5_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Keyword cDefaultKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cColonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cDefaultAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cDefaultGotoStmtParserRuleCall_8_0 = (RuleCall)cDefaultAssignment_8.eContents().get(0);
		private final Keyword cSemicolonKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Keyword cRightCurlyBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		//TableSwitchStmt:
		//	"tableswitch" "(" key=Local ")" "{" (cases+=Case ";")* "default" ":" default=GotoStmt ";" "}";
		public ParserRule getRule() { return rule; }

		//"tableswitch" "(" key=Local ")" "{" (cases+=Case ";")* "default" ":" default=GotoStmt ";" "}"
		public Group getGroup() { return cGroup; }

		//"tableswitch"
		public Keyword getTableswitchKeyword_0() { return cTableswitchKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//key=Local
		public Assignment getKeyAssignment_2() { return cKeyAssignment_2; }

		//Local
		public RuleCall getKeyLocalParserRuleCall_2_0() { return cKeyLocalParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }

		//(cases+=Case ";")*
		public Group getGroup_5() { return cGroup_5; }

		//cases+=Case
		public Assignment getCasesAssignment_5_0() { return cCasesAssignment_5_0; }

		//Case
		public RuleCall getCasesCaseParserRuleCall_5_0_0() { return cCasesCaseParserRuleCall_5_0_0; }

		//";"
		public Keyword getSemicolonKeyword_5_1() { return cSemicolonKeyword_5_1; }

		//"default"
		public Keyword getDefaultKeyword_6() { return cDefaultKeyword_6; }

		//":"
		public Keyword getColonKeyword_7() { return cColonKeyword_7; }

		//default=GotoStmt
		public Assignment getDefaultAssignment_8() { return cDefaultAssignment_8; }

		//GotoStmt
		public RuleCall getDefaultGotoStmtParserRuleCall_8_0() { return cDefaultGotoStmtParserRuleCall_8_0; }

		//";"
		public Keyword getSemicolonKeyword_9() { return cSemicolonKeyword_9; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_10() { return cRightCurlyBracketKeyword_10; }
	}

	public class LookupSwitchStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LookupSwitchStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLookupSwitchStmtAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLookupswitchKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//LookupSwitchStmt:
		//	{LookupSwitchStmt} "lookupswitch";
		public ParserRule getRule() { return rule; }

		//{LookupSwitchStmt} "lookupswitch"
		public Group getGroup() { return cGroup; }

		//{LookupSwitchStmt}
		public Action getLookupSwitchStmtAction_0() { return cLookupSwitchStmtAction_0; }

		//"lookupswitch"
		public Keyword getLookupswitchKeyword_1() { return cLookupswitchKeyword_1; }
	}

	public class MonitorStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MonitorStmt");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEnterMonitorStmtParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cExitMonitorStmtParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//MonitorStmt:
		//	EnterMonitorStmt | ExitMonitorStmt;
		public ParserRule getRule() { return rule; }

		//EnterMonitorStmt | ExitMonitorStmt
		public Alternatives getAlternatives() { return cAlternatives; }

		//EnterMonitorStmt
		public RuleCall getEnterMonitorStmtParserRuleCall_0() { return cEnterMonitorStmtParserRuleCall_0; }

		//ExitMonitorStmt
		public RuleCall getExitMonitorStmtParserRuleCall_1() { return cExitMonitorStmtParserRuleCall_1; }
	}

	public class EnterMonitorStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EnterMonitorStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEntermonitorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cOperandAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOperandValueParserRuleCall_1_0 = (RuleCall)cOperandAssignment_1.eContents().get(0);
		
		//EnterMonitorStmt:
		//	"entermonitor" operand=Value;
		public ParserRule getRule() { return rule; }

		//"entermonitor" operand=Value
		public Group getGroup() { return cGroup; }

		//"entermonitor"
		public Keyword getEntermonitorKeyword_0() { return cEntermonitorKeyword_0; }

		//operand=Value
		public Assignment getOperandAssignment_1() { return cOperandAssignment_1; }

		//Value
		public RuleCall getOperandValueParserRuleCall_1_0() { return cOperandValueParserRuleCall_1_0; }
	}

	public class ExitMonitorStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExitMonitorStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExitmonitorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cOperandAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOperandValueParserRuleCall_1_0 = (RuleCall)cOperandAssignment_1.eContents().get(0);
		
		//ExitMonitorStmt:
		//	"exitmonitor" operand=Value;
		public ParserRule getRule() { return rule; }

		//"exitmonitor" operand=Value
		public Group getGroup() { return cGroup; }

		//"exitmonitor"
		public Keyword getExitmonitorKeyword_0() { return cExitmonitorKeyword_0; }

		//operand=Value
		public Assignment getOperandAssignment_1() { return cOperandAssignment_1; }

		//Value
		public RuleCall getOperandValueParserRuleCall_1_0() { return cOperandValueParserRuleCall_1_0; }
	}

	public class NopStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NopStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNopStmtAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cNopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//NopStmt:
		//	{NopStmt} "nop";
		public ParserRule getRule() { return rule; }

		//{NopStmt} "nop"
		public Group getGroup() { return cGroup; }

		//{NopStmt}
		public Action getNopStmtAction_0() { return cNopStmtAction_0; }

		//"nop"
		public Keyword getNopKeyword_1() { return cNopKeyword_1; }
	}

	public class RetStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RetStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRetKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTargetAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTargetLocalParserRuleCall_1_0 = (RuleCall)cTargetAssignment_1.eContents().get(0);
		
		//RetStmt:
		//	"ret" target=Local;
		public ParserRule getRule() { return rule; }

		//"ret" target=Local
		public Group getGroup() { return cGroup; }

		//"ret"
		public Keyword getRetKeyword_0() { return cRetKeyword_0; }

		//target=Local
		public Assignment getTargetAssignment_1() { return cTargetAssignment_1; }

		//Local
		public RuleCall getTargetLocalParserRuleCall_1_0() { return cTargetLocalParserRuleCall_1_0; }
	}

	public class ReturnVoidStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ReturnVoidStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cReturnVoidStmtAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cReturnKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//ReturnVoidStmt:
		//	{ReturnVoidStmt} "return";
		public ParserRule getRule() { return rule; }

		//{ReturnVoidStmt} "return"
		public Group getGroup() { return cGroup; }

		//{ReturnVoidStmt}
		public Action getReturnVoidStmtAction_0() { return cReturnVoidStmtAction_0; }

		//"return"
		public Keyword getReturnKeyword_1() { return cReturnKeyword_1; }
	}

	public class ReturnStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ReturnStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReturnKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cOperandAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOperandValueParserRuleCall_1_0 = (RuleCall)cOperandAssignment_1.eContents().get(0);
		
		//ReturnStmt:
		//	"return" operand=Value;
		public ParserRule getRule() { return rule; }

		//"return" operand=Value
		public Group getGroup() { return cGroup; }

		//"return"
		public Keyword getReturnKeyword_0() { return cReturnKeyword_0; }

		//operand=Value
		public Assignment getOperandAssignment_1() { return cOperandAssignment_1; }

		//Value
		public RuleCall getOperandValueParserRuleCall_1_0() { return cOperandValueParserRuleCall_1_0; }
	}

	public class CaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Case");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCaseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTargetAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTargetGotoStmtParserRuleCall_3_0 = (RuleCall)cTargetAssignment_3.eContents().get(0);
		
		//Case:
		//	"case" value=INT ":" target=GotoStmt;
		public ParserRule getRule() { return rule; }

		//"case" value=INT ":" target=GotoStmt
		public Group getGroup() { return cGroup; }

		//"case"
		public Keyword getCaseKeyword_0() { return cCaseKeyword_0; }

		//value=INT
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_1_0() { return cValueINTTerminalRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//target=GotoStmt
		public Assignment getTargetAssignment_3() { return cTargetAssignment_3; }

		//GotoStmt
		public RuleCall getTargetGotoStmtParserRuleCall_3_0() { return cTargetGotoStmtParserRuleCall_3_0; }
	}

	public class ThrowStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ThrowStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cThrowKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cOperandAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOperandValueParserRuleCall_1_0 = (RuleCall)cOperandAssignment_1.eContents().get(0);
		
		//ThrowStmt:
		//	"throw" operand=Value;
		public ParserRule getRule() { return rule; }

		//"throw" operand=Value
		public Group getGroup() { return cGroup; }

		//"throw"
		public Keyword getThrowKeyword_0() { return cThrowKeyword_0; }

		//operand=Value
		public Assignment getOperandAssignment_1() { return cOperandAssignment_1; }

		//Value
		public RuleCall getOperandValueParserRuleCall_1_0() { return cOperandValueParserRuleCall_1_0; }
	}

	public class ValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Value");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNonExprParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cExprParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//// Values
		//Value:
		//	NonExpr | Expr;
		public ParserRule getRule() { return rule; }

		//NonExpr | Expr
		public Alternatives getAlternatives() { return cAlternatives; }

		//NonExpr
		public RuleCall getNonExprParserRuleCall_0() { return cNonExprParserRuleCall_0; }

		//Expr
		public RuleCall getExprParserRuleCall_1() { return cExprParserRuleCall_1; }
	}

	public class NonExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NonExpr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cConstantParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRefParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//NonExpr:
		//	Constant | Ref;
		public ParserRule getRule() { return rule; }

		//Constant | Ref
		public Alternatives getAlternatives() { return cAlternatives; }

		//Constant
		public RuleCall getConstantParserRuleCall_0() { return cConstantParserRuleCall_0; }

		//Ref
		public RuleCall getRefParserRuleCall_1() { return cRefParserRuleCall_1; }
	}

	public class ExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAnyNewExprParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBinOpExprParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cCastExprParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cInstanceOfExprParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cInvokeExprParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cUnopExprParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//Expr:
		//	AnyNewExpr | BinOpExpr | CastExpr | InstanceOfExpr | InvokeExpr | UnopExpr;
		public ParserRule getRule() { return rule; }

		//AnyNewExpr | BinOpExpr | CastExpr | InstanceOfExpr | InvokeExpr | UnopExpr
		public Alternatives getAlternatives() { return cAlternatives; }

		//AnyNewExpr
		public RuleCall getAnyNewExprParserRuleCall_0() { return cAnyNewExprParserRuleCall_0; }

		//BinOpExpr
		public RuleCall getBinOpExprParserRuleCall_1() { return cBinOpExprParserRuleCall_1; }

		//CastExpr
		public RuleCall getCastExprParserRuleCall_2() { return cCastExprParserRuleCall_2; }

		//InstanceOfExpr
		public RuleCall getInstanceOfExprParserRuleCall_3() { return cInstanceOfExprParserRuleCall_3; }

		//InvokeExpr
		public RuleCall getInvokeExprParserRuleCall_4() { return cInvokeExprParserRuleCall_4; }

		//UnopExpr
		public RuleCall getUnopExprParserRuleCall_5() { return cUnopExprParserRuleCall_5; }
	}

	public class AnyNewExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AnyNewExpr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNewArrayExprParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNewExprParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cNewMultiArrayExprParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//AnyNewExpr:
		//	NewArrayExpr | NewExpr | NewMultiArrayExpr;
		public ParserRule getRule() { return rule; }

		//NewArrayExpr | NewExpr | NewMultiArrayExpr
		public Alternatives getAlternatives() { return cAlternatives; }

		//NewArrayExpr
		public RuleCall getNewArrayExprParserRuleCall_0() { return cNewArrayExprParserRuleCall_0; }

		//NewExpr
		public RuleCall getNewExprParserRuleCall_1() { return cNewExprParserRuleCall_1; }

		//NewMultiArrayExpr
		public RuleCall getNewMultiArrayExprParserRuleCall_2() { return cNewMultiArrayExprParserRuleCall_2; }
	}

	public class BinOpExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BinOpExpr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAddExprParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAndExprParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cCmpExprParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cCmpgExprParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cCmplExprParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cConditionalExprParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cDivExprParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cMulExprParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cOrExprParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cRemExprParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cShlExprParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cShrExprParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cSubExprParserRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		private final RuleCall cUshrExprParserRuleCall_13 = (RuleCall)cAlternatives.eContents().get(13);
		private final RuleCall cXorExprParserRuleCall_14 = (RuleCall)cAlternatives.eContents().get(14);
		
		//BinOpExpr:
		//	AddExpr | AndExpr | CmpExpr | CmpgExpr | CmplExpr | ConditionalExpr | DivExpr | MulExpr | OrExpr | RemExpr | ShlExpr |
		//	ShrExpr | SubExpr | UshrExpr | XorExpr;
		public ParserRule getRule() { return rule; }

		//AddExpr | AndExpr | CmpExpr | CmpgExpr | CmplExpr | ConditionalExpr | DivExpr | MulExpr | OrExpr | RemExpr | ShlExpr |
		//ShrExpr | SubExpr | UshrExpr | XorExpr
		public Alternatives getAlternatives() { return cAlternatives; }

		//AddExpr
		public RuleCall getAddExprParserRuleCall_0() { return cAddExprParserRuleCall_0; }

		//AndExpr
		public RuleCall getAndExprParserRuleCall_1() { return cAndExprParserRuleCall_1; }

		//CmpExpr
		public RuleCall getCmpExprParserRuleCall_2() { return cCmpExprParserRuleCall_2; }

		//CmpgExpr
		public RuleCall getCmpgExprParserRuleCall_3() { return cCmpgExprParserRuleCall_3; }

		//CmplExpr
		public RuleCall getCmplExprParserRuleCall_4() { return cCmplExprParserRuleCall_4; }

		//ConditionalExpr
		public RuleCall getConditionalExprParserRuleCall_5() { return cConditionalExprParserRuleCall_5; }

		//DivExpr
		public RuleCall getDivExprParserRuleCall_6() { return cDivExprParserRuleCall_6; }

		//MulExpr
		public RuleCall getMulExprParserRuleCall_7() { return cMulExprParserRuleCall_7; }

		//OrExpr
		public RuleCall getOrExprParserRuleCall_8() { return cOrExprParserRuleCall_8; }

		//RemExpr
		public RuleCall getRemExprParserRuleCall_9() { return cRemExprParserRuleCall_9; }

		//ShlExpr
		public RuleCall getShlExprParserRuleCall_10() { return cShlExprParserRuleCall_10; }

		//ShrExpr
		public RuleCall getShrExprParserRuleCall_11() { return cShrExprParserRuleCall_11; }

		//SubExpr
		public RuleCall getSubExprParserRuleCall_12() { return cSubExprParserRuleCall_12; }

		//UshrExpr
		public RuleCall getUshrExprParserRuleCall_13() { return cUshrExprParserRuleCall_13; }

		//XorExpr
		public RuleCall getXorExprParserRuleCall_14() { return cXorExprParserRuleCall_14; }
	}

	public class AddExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AddExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftOpAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftOpNonExprParserRuleCall_0_0 = (RuleCall)cLeftOpAssignment_0.eContents().get(0);
		private final Keyword cPlusSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRightOpAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRightOpNonExprParserRuleCall_2_0 = (RuleCall)cRightOpAssignment_2.eContents().get(0);
		
		//AddExpr:
		//	leftOp=NonExpr "+" rightOp=NonExpr;
		public ParserRule getRule() { return rule; }

		//leftOp=NonExpr "+" rightOp=NonExpr
		public Group getGroup() { return cGroup; }

		//leftOp=NonExpr
		public Assignment getLeftOpAssignment_0() { return cLeftOpAssignment_0; }

		//NonExpr
		public RuleCall getLeftOpNonExprParserRuleCall_0_0() { return cLeftOpNonExprParserRuleCall_0_0; }

		//"+"
		public Keyword getPlusSignKeyword_1() { return cPlusSignKeyword_1; }

		//rightOp=NonExpr
		public Assignment getRightOpAssignment_2() { return cRightOpAssignment_2; }

		//NonExpr
		public RuleCall getRightOpNonExprParserRuleCall_2_0() { return cRightOpNonExprParserRuleCall_2_0; }
	}

	public class AndExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AndExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftOpAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftOpNonExprParserRuleCall_0_0 = (RuleCall)cLeftOpAssignment_0.eContents().get(0);
		private final Keyword cAmpersandKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRightOpAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRightOpNonExprParserRuleCall_2_0 = (RuleCall)cRightOpAssignment_2.eContents().get(0);
		
		//AndExpr:
		//	leftOp=NonExpr "&" rightOp=NonExpr;
		public ParserRule getRule() { return rule; }

		//leftOp=NonExpr "&" rightOp=NonExpr
		public Group getGroup() { return cGroup; }

		//leftOp=NonExpr
		public Assignment getLeftOpAssignment_0() { return cLeftOpAssignment_0; }

		//NonExpr
		public RuleCall getLeftOpNonExprParserRuleCall_0_0() { return cLeftOpNonExprParserRuleCall_0_0; }

		//"&"
		public Keyword getAmpersandKeyword_1() { return cAmpersandKeyword_1; }

		//rightOp=NonExpr
		public Assignment getRightOpAssignment_2() { return cRightOpAssignment_2; }

		//NonExpr
		public RuleCall getRightOpNonExprParserRuleCall_2_0() { return cRightOpNonExprParserRuleCall_2_0; }
	}

	public class CmpExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CmpExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftOpAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftOpNonExprParserRuleCall_0_0 = (RuleCall)cLeftOpAssignment_0.eContents().get(0);
		private final Keyword cCmpKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRightOpAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRightOpNonExprParserRuleCall_2_0 = (RuleCall)cRightOpAssignment_2.eContents().get(0);
		
		//CmpExpr:
		//	leftOp=NonExpr "cmp" rightOp=NonExpr;
		public ParserRule getRule() { return rule; }

		//leftOp=NonExpr "cmp" rightOp=NonExpr
		public Group getGroup() { return cGroup; }

		//leftOp=NonExpr
		public Assignment getLeftOpAssignment_0() { return cLeftOpAssignment_0; }

		//NonExpr
		public RuleCall getLeftOpNonExprParserRuleCall_0_0() { return cLeftOpNonExprParserRuleCall_0_0; }

		//"cmp"
		public Keyword getCmpKeyword_1() { return cCmpKeyword_1; }

		//rightOp=NonExpr
		public Assignment getRightOpAssignment_2() { return cRightOpAssignment_2; }

		//NonExpr
		public RuleCall getRightOpNonExprParserRuleCall_2_0() { return cRightOpNonExprParserRuleCall_2_0; }
	}

	public class CmpgExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CmpgExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftOpAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftOpNonExprParserRuleCall_0_0 = (RuleCall)cLeftOpAssignment_0.eContents().get(0);
		private final Keyword cCmpgKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRightOpAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRightOpNonExprParserRuleCall_2_0 = (RuleCall)cRightOpAssignment_2.eContents().get(0);
		
		//CmpgExpr:
		//	leftOp=NonExpr "cmpg" rightOp=NonExpr;
		public ParserRule getRule() { return rule; }

		//leftOp=NonExpr "cmpg" rightOp=NonExpr
		public Group getGroup() { return cGroup; }

		//leftOp=NonExpr
		public Assignment getLeftOpAssignment_0() { return cLeftOpAssignment_0; }

		//NonExpr
		public RuleCall getLeftOpNonExprParserRuleCall_0_0() { return cLeftOpNonExprParserRuleCall_0_0; }

		//"cmpg"
		public Keyword getCmpgKeyword_1() { return cCmpgKeyword_1; }

		//rightOp=NonExpr
		public Assignment getRightOpAssignment_2() { return cRightOpAssignment_2; }

		//NonExpr
		public RuleCall getRightOpNonExprParserRuleCall_2_0() { return cRightOpNonExprParserRuleCall_2_0; }
	}

	public class CmplExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CmplExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftOpAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftOpNonExprParserRuleCall_0_0 = (RuleCall)cLeftOpAssignment_0.eContents().get(0);
		private final Keyword cCmplKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRightOpAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRightOpNonExprParserRuleCall_2_0 = (RuleCall)cRightOpAssignment_2.eContents().get(0);
		
		//CmplExpr:
		//	leftOp=NonExpr "cmpl" rightOp=NonExpr;
		public ParserRule getRule() { return rule; }

		//leftOp=NonExpr "cmpl" rightOp=NonExpr
		public Group getGroup() { return cGroup; }

		//leftOp=NonExpr
		public Assignment getLeftOpAssignment_0() { return cLeftOpAssignment_0; }

		//NonExpr
		public RuleCall getLeftOpNonExprParserRuleCall_0_0() { return cLeftOpNonExprParserRuleCall_0_0; }

		//"cmpl"
		public Keyword getCmplKeyword_1() { return cCmplKeyword_1; }

		//rightOp=NonExpr
		public Assignment getRightOpAssignment_2() { return cRightOpAssignment_2; }

		//NonExpr
		public RuleCall getRightOpNonExprParserRuleCall_2_0() { return cRightOpNonExprParserRuleCall_2_0; }
	}

	public class ConditionalExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConditionalExpr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEqExprParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cGeExprParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cGtExprParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cLeExprParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cLtExprParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cNeExprParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//ConditionalExpr:
		//	EqExpr | GeExpr | GtExpr | LeExpr | LtExpr | NeExpr;
		public ParserRule getRule() { return rule; }

		//EqExpr | GeExpr | GtExpr | LeExpr | LtExpr | NeExpr
		public Alternatives getAlternatives() { return cAlternatives; }

		//EqExpr
		public RuleCall getEqExprParserRuleCall_0() { return cEqExprParserRuleCall_0; }

		//GeExpr
		public RuleCall getGeExprParserRuleCall_1() { return cGeExprParserRuleCall_1; }

		//GtExpr
		public RuleCall getGtExprParserRuleCall_2() { return cGtExprParserRuleCall_2; }

		//LeExpr
		public RuleCall getLeExprParserRuleCall_3() { return cLeExprParserRuleCall_3; }

		//LtExpr
		public RuleCall getLtExprParserRuleCall_4() { return cLtExprParserRuleCall_4; }

		//NeExpr
		public RuleCall getNeExprParserRuleCall_5() { return cNeExprParserRuleCall_5; }
	}

	public class DivExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DivExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftOpAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftOpNonExprParserRuleCall_0_0 = (RuleCall)cLeftOpAssignment_0.eContents().get(0);
		private final Keyword cSolidusKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRightOpAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRightOpNonExprParserRuleCall_2_0 = (RuleCall)cRightOpAssignment_2.eContents().get(0);
		
		//DivExpr:
		//	leftOp=NonExpr "/" rightOp=NonExpr;
		public ParserRule getRule() { return rule; }

		//leftOp=NonExpr "/" rightOp=NonExpr
		public Group getGroup() { return cGroup; }

		//leftOp=NonExpr
		public Assignment getLeftOpAssignment_0() { return cLeftOpAssignment_0; }

		//NonExpr
		public RuleCall getLeftOpNonExprParserRuleCall_0_0() { return cLeftOpNonExprParserRuleCall_0_0; }

		//"/"
		public Keyword getSolidusKeyword_1() { return cSolidusKeyword_1; }

		//rightOp=NonExpr
		public Assignment getRightOpAssignment_2() { return cRightOpAssignment_2; }

		//NonExpr
		public RuleCall getRightOpNonExprParserRuleCall_2_0() { return cRightOpNonExprParserRuleCall_2_0; }
	}

	public class MulExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MulExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftOpAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftOpNonExprParserRuleCall_0_0 = (RuleCall)cLeftOpAssignment_0.eContents().get(0);
		private final Keyword cAsteriskKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRightOpAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRightOpNonExprParserRuleCall_2_0 = (RuleCall)cRightOpAssignment_2.eContents().get(0);
		
		//MulExpr:
		//	leftOp=NonExpr "*" rightOp=NonExpr;
		public ParserRule getRule() { return rule; }

		//leftOp=NonExpr "*" rightOp=NonExpr
		public Group getGroup() { return cGroup; }

		//leftOp=NonExpr
		public Assignment getLeftOpAssignment_0() { return cLeftOpAssignment_0; }

		//NonExpr
		public RuleCall getLeftOpNonExprParserRuleCall_0_0() { return cLeftOpNonExprParserRuleCall_0_0; }

		//"*"
		public Keyword getAsteriskKeyword_1() { return cAsteriskKeyword_1; }

		//rightOp=NonExpr
		public Assignment getRightOpAssignment_2() { return cRightOpAssignment_2; }

		//NonExpr
		public RuleCall getRightOpNonExprParserRuleCall_2_0() { return cRightOpNonExprParserRuleCall_2_0; }
	}

	public class OrExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OrExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftOpAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftOpNonExprParserRuleCall_0_0 = (RuleCall)cLeftOpAssignment_0.eContents().get(0);
		private final Keyword cVerticalLineKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRightOpAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRightOpNonExprParserRuleCall_2_0 = (RuleCall)cRightOpAssignment_2.eContents().get(0);
		
		//OrExpr:
		//	leftOp=NonExpr "|" rightOp=NonExpr;
		public ParserRule getRule() { return rule; }

		//leftOp=NonExpr "|" rightOp=NonExpr
		public Group getGroup() { return cGroup; }

		//leftOp=NonExpr
		public Assignment getLeftOpAssignment_0() { return cLeftOpAssignment_0; }

		//NonExpr
		public RuleCall getLeftOpNonExprParserRuleCall_0_0() { return cLeftOpNonExprParserRuleCall_0_0; }

		//"|"
		public Keyword getVerticalLineKeyword_1() { return cVerticalLineKeyword_1; }

		//rightOp=NonExpr
		public Assignment getRightOpAssignment_2() { return cRightOpAssignment_2; }

		//NonExpr
		public RuleCall getRightOpNonExprParserRuleCall_2_0() { return cRightOpNonExprParserRuleCall_2_0; }
	}

	public class RemExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RemExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftOpAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftOpNonExprParserRuleCall_0_0 = (RuleCall)cLeftOpAssignment_0.eContents().get(0);
		private final Keyword cPercentSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRightOpAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRightOpNonExprParserRuleCall_2_0 = (RuleCall)cRightOpAssignment_2.eContents().get(0);
		
		//RemExpr:
		//	leftOp=NonExpr "%" rightOp=NonExpr;
		public ParserRule getRule() { return rule; }

		//leftOp=NonExpr "%" rightOp=NonExpr
		public Group getGroup() { return cGroup; }

		//leftOp=NonExpr
		public Assignment getLeftOpAssignment_0() { return cLeftOpAssignment_0; }

		//NonExpr
		public RuleCall getLeftOpNonExprParserRuleCall_0_0() { return cLeftOpNonExprParserRuleCall_0_0; }

		//"%"
		public Keyword getPercentSignKeyword_1() { return cPercentSignKeyword_1; }

		//rightOp=NonExpr
		public Assignment getRightOpAssignment_2() { return cRightOpAssignment_2; }

		//NonExpr
		public RuleCall getRightOpNonExprParserRuleCall_2_0() { return cRightOpNonExprParserRuleCall_2_0; }
	}

	public class ShlExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ShlExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftOpAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftOpNonExprParserRuleCall_0_0 = (RuleCall)cLeftOpAssignment_0.eContents().get(0);
		private final Keyword cLessThanSignLessThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRightOpAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRightOpNonExprParserRuleCall_2_0 = (RuleCall)cRightOpAssignment_2.eContents().get(0);
		
		//ShlExpr:
		//	leftOp=NonExpr "<<" rightOp=NonExpr;
		public ParserRule getRule() { return rule; }

		//leftOp=NonExpr "<<" rightOp=NonExpr
		public Group getGroup() { return cGroup; }

		//leftOp=NonExpr
		public Assignment getLeftOpAssignment_0() { return cLeftOpAssignment_0; }

		//NonExpr
		public RuleCall getLeftOpNonExprParserRuleCall_0_0() { return cLeftOpNonExprParserRuleCall_0_0; }

		//"<<"
		public Keyword getLessThanSignLessThanSignKeyword_1() { return cLessThanSignLessThanSignKeyword_1; }

		//rightOp=NonExpr
		public Assignment getRightOpAssignment_2() { return cRightOpAssignment_2; }

		//NonExpr
		public RuleCall getRightOpNonExprParserRuleCall_2_0() { return cRightOpNonExprParserRuleCall_2_0; }
	}

	public class ShrExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ShrExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftOpAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftOpNonExprParserRuleCall_0_0 = (RuleCall)cLeftOpAssignment_0.eContents().get(0);
		private final Keyword cGreaterThanSignGreaterThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRightOpAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRightOpNonExprParserRuleCall_2_0 = (RuleCall)cRightOpAssignment_2.eContents().get(0);
		
		//ShrExpr:
		//	leftOp=NonExpr ">>" rightOp=NonExpr;
		public ParserRule getRule() { return rule; }

		//leftOp=NonExpr ">>" rightOp=NonExpr
		public Group getGroup() { return cGroup; }

		//leftOp=NonExpr
		public Assignment getLeftOpAssignment_0() { return cLeftOpAssignment_0; }

		//NonExpr
		public RuleCall getLeftOpNonExprParserRuleCall_0_0() { return cLeftOpNonExprParserRuleCall_0_0; }

		//">>"
		public Keyword getGreaterThanSignGreaterThanSignKeyword_1() { return cGreaterThanSignGreaterThanSignKeyword_1; }

		//rightOp=NonExpr
		public Assignment getRightOpAssignment_2() { return cRightOpAssignment_2; }

		//NonExpr
		public RuleCall getRightOpNonExprParserRuleCall_2_0() { return cRightOpNonExprParserRuleCall_2_0; }
	}

	public class SubExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SubExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftOpAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftOpNonExprParserRuleCall_0_0 = (RuleCall)cLeftOpAssignment_0.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRightOpAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRightOpNonExprParserRuleCall_2_0 = (RuleCall)cRightOpAssignment_2.eContents().get(0);
		
		//SubExpr:
		//	leftOp=NonExpr "-" rightOp=NonExpr;
		public ParserRule getRule() { return rule; }

		//leftOp=NonExpr "-" rightOp=NonExpr
		public Group getGroup() { return cGroup; }

		//leftOp=NonExpr
		public Assignment getLeftOpAssignment_0() { return cLeftOpAssignment_0; }

		//NonExpr
		public RuleCall getLeftOpNonExprParserRuleCall_0_0() { return cLeftOpNonExprParserRuleCall_0_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }

		//rightOp=NonExpr
		public Assignment getRightOpAssignment_2() { return cRightOpAssignment_2; }

		//NonExpr
		public RuleCall getRightOpNonExprParserRuleCall_2_0() { return cRightOpNonExprParserRuleCall_2_0; }
	}

	public class UshrExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UshrExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftOpAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftOpNonExprParserRuleCall_0_0 = (RuleCall)cLeftOpAssignment_0.eContents().get(0);
		private final Keyword cGreaterThanSignGreaterThanSignGreaterThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRightOpAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRightOpNonExprParserRuleCall_2_0 = (RuleCall)cRightOpAssignment_2.eContents().get(0);
		
		//UshrExpr:
		//	leftOp=NonExpr ">>>" rightOp=NonExpr;
		public ParserRule getRule() { return rule; }

		//leftOp=NonExpr ">>>" rightOp=NonExpr
		public Group getGroup() { return cGroup; }

		//leftOp=NonExpr
		public Assignment getLeftOpAssignment_0() { return cLeftOpAssignment_0; }

		//NonExpr
		public RuleCall getLeftOpNonExprParserRuleCall_0_0() { return cLeftOpNonExprParserRuleCall_0_0; }

		//">>>"
		public Keyword getGreaterThanSignGreaterThanSignGreaterThanSignKeyword_1() { return cGreaterThanSignGreaterThanSignGreaterThanSignKeyword_1; }

		//rightOp=NonExpr
		public Assignment getRightOpAssignment_2() { return cRightOpAssignment_2; }

		//NonExpr
		public RuleCall getRightOpNonExprParserRuleCall_2_0() { return cRightOpNonExprParserRuleCall_2_0; }
	}

	public class XorExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XorExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftOpAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftOpNonExprParserRuleCall_0_0 = (RuleCall)cLeftOpAssignment_0.eContents().get(0);
		private final Keyword cCircumflexAccentKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRightOpAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRightOpNonExprParserRuleCall_2_0 = (RuleCall)cRightOpAssignment_2.eContents().get(0);
		
		//XorExpr:
		//	leftOp=NonExpr "^" rightOp=NonExpr;
		public ParserRule getRule() { return rule; }

		//leftOp=NonExpr "^" rightOp=NonExpr
		public Group getGroup() { return cGroup; }

		//leftOp=NonExpr
		public Assignment getLeftOpAssignment_0() { return cLeftOpAssignment_0; }

		//NonExpr
		public RuleCall getLeftOpNonExprParserRuleCall_0_0() { return cLeftOpNonExprParserRuleCall_0_0; }

		//"^"
		public Keyword getCircumflexAccentKeyword_1() { return cCircumflexAccentKeyword_1; }

		//rightOp=NonExpr
		public Assignment getRightOpAssignment_2() { return cRightOpAssignment_2; }

		//NonExpr
		public RuleCall getRightOpNonExprParserRuleCall_2_0() { return cRightOpNonExprParserRuleCall_2_0; }
	}

	public class EqExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EqExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftOpAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftOpNonExprParserRuleCall_0_0 = (RuleCall)cLeftOpAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRightOpAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRightOpNonExprParserRuleCall_2_0 = (RuleCall)cRightOpAssignment_2.eContents().get(0);
		
		//EqExpr:
		//	leftOp=NonExpr "==" rightOp=NonExpr;
		public ParserRule getRule() { return rule; }

		//leftOp=NonExpr "==" rightOp=NonExpr
		public Group getGroup() { return cGroup; }

		//leftOp=NonExpr
		public Assignment getLeftOpAssignment_0() { return cLeftOpAssignment_0; }

		//NonExpr
		public RuleCall getLeftOpNonExprParserRuleCall_0_0() { return cLeftOpNonExprParserRuleCall_0_0; }

		//"=="
		public Keyword getEqualsSignEqualsSignKeyword_1() { return cEqualsSignEqualsSignKeyword_1; }

		//rightOp=NonExpr
		public Assignment getRightOpAssignment_2() { return cRightOpAssignment_2; }

		//NonExpr
		public RuleCall getRightOpNonExprParserRuleCall_2_0() { return cRightOpNonExprParserRuleCall_2_0; }
	}

	public class GeExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GeExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftOpAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftOpNonExprParserRuleCall_0_0 = (RuleCall)cLeftOpAssignment_0.eContents().get(0);
		private final Keyword cGreaterThanSignEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRightOpAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRightOpNonExprParserRuleCall_2_0 = (RuleCall)cRightOpAssignment_2.eContents().get(0);
		
		//GeExpr:
		//	leftOp=NonExpr ">=" rightOp=NonExpr;
		public ParserRule getRule() { return rule; }

		//leftOp=NonExpr ">=" rightOp=NonExpr
		public Group getGroup() { return cGroup; }

		//leftOp=NonExpr
		public Assignment getLeftOpAssignment_0() { return cLeftOpAssignment_0; }

		//NonExpr
		public RuleCall getLeftOpNonExprParserRuleCall_0_0() { return cLeftOpNonExprParserRuleCall_0_0; }

		//">="
		public Keyword getGreaterThanSignEqualsSignKeyword_1() { return cGreaterThanSignEqualsSignKeyword_1; }

		//rightOp=NonExpr
		public Assignment getRightOpAssignment_2() { return cRightOpAssignment_2; }

		//NonExpr
		public RuleCall getRightOpNonExprParserRuleCall_2_0() { return cRightOpNonExprParserRuleCall_2_0; }
	}

	public class GtExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GtExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftOpAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftOpNonExprParserRuleCall_0_0 = (RuleCall)cLeftOpAssignment_0.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRightOpAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRightOpNonExprParserRuleCall_2_0 = (RuleCall)cRightOpAssignment_2.eContents().get(0);
		
		//GtExpr:
		//	leftOp=NonExpr ">" rightOp=NonExpr;
		public ParserRule getRule() { return rule; }

		//leftOp=NonExpr ">" rightOp=NonExpr
		public Group getGroup() { return cGroup; }

		//leftOp=NonExpr
		public Assignment getLeftOpAssignment_0() { return cLeftOpAssignment_0; }

		//NonExpr
		public RuleCall getLeftOpNonExprParserRuleCall_0_0() { return cLeftOpNonExprParserRuleCall_0_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_1() { return cGreaterThanSignKeyword_1; }

		//rightOp=NonExpr
		public Assignment getRightOpAssignment_2() { return cRightOpAssignment_2; }

		//NonExpr
		public RuleCall getRightOpNonExprParserRuleCall_2_0() { return cRightOpNonExprParserRuleCall_2_0; }
	}

	public class LeExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LeExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftOpAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftOpNonExprParserRuleCall_0_0 = (RuleCall)cLeftOpAssignment_0.eContents().get(0);
		private final Keyword cLessThanSignEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRightOpAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRightOpNonExprParserRuleCall_2_0 = (RuleCall)cRightOpAssignment_2.eContents().get(0);
		
		//LeExpr:
		//	leftOp=NonExpr "<=" rightOp=NonExpr;
		public ParserRule getRule() { return rule; }

		//leftOp=NonExpr "<=" rightOp=NonExpr
		public Group getGroup() { return cGroup; }

		//leftOp=NonExpr
		public Assignment getLeftOpAssignment_0() { return cLeftOpAssignment_0; }

		//NonExpr
		public RuleCall getLeftOpNonExprParserRuleCall_0_0() { return cLeftOpNonExprParserRuleCall_0_0; }

		//"<="
		public Keyword getLessThanSignEqualsSignKeyword_1() { return cLessThanSignEqualsSignKeyword_1; }

		//rightOp=NonExpr
		public Assignment getRightOpAssignment_2() { return cRightOpAssignment_2; }

		//NonExpr
		public RuleCall getRightOpNonExprParserRuleCall_2_0() { return cRightOpNonExprParserRuleCall_2_0; }
	}

	public class LtExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LtExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftOpAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftOpNonExprParserRuleCall_0_0 = (RuleCall)cLeftOpAssignment_0.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRightOpAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRightOpNonExprParserRuleCall_2_0 = (RuleCall)cRightOpAssignment_2.eContents().get(0);
		
		//LtExpr:
		//	leftOp=NonExpr "<" rightOp=NonExpr;
		public ParserRule getRule() { return rule; }

		//leftOp=NonExpr "<" rightOp=NonExpr
		public Group getGroup() { return cGroup; }

		//leftOp=NonExpr
		public Assignment getLeftOpAssignment_0() { return cLeftOpAssignment_0; }

		//NonExpr
		public RuleCall getLeftOpNonExprParserRuleCall_0_0() { return cLeftOpNonExprParserRuleCall_0_0; }

		//"<"
		public Keyword getLessThanSignKeyword_1() { return cLessThanSignKeyword_1; }

		//rightOp=NonExpr
		public Assignment getRightOpAssignment_2() { return cRightOpAssignment_2; }

		//NonExpr
		public RuleCall getRightOpNonExprParserRuleCall_2_0() { return cRightOpNonExprParserRuleCall_2_0; }
	}

	public class NeExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NeExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftOpAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftOpNonExprParserRuleCall_0_0 = (RuleCall)cLeftOpAssignment_0.eContents().get(0);
		private final Keyword cExclamationMarkEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRightOpAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRightOpNonExprParserRuleCall_2_0 = (RuleCall)cRightOpAssignment_2.eContents().get(0);
		
		//NeExpr:
		//	leftOp=NonExpr "!=" rightOp=NonExpr;
		public ParserRule getRule() { return rule; }

		//leftOp=NonExpr "!=" rightOp=NonExpr
		public Group getGroup() { return cGroup; }

		//leftOp=NonExpr
		public Assignment getLeftOpAssignment_0() { return cLeftOpAssignment_0; }

		//NonExpr
		public RuleCall getLeftOpNonExprParserRuleCall_0_0() { return cLeftOpNonExprParserRuleCall_0_0; }

		//"!="
		public Keyword getExclamationMarkEqualsSignKeyword_1() { return cExclamationMarkEqualsSignKeyword_1; }

		//rightOp=NonExpr
		public Assignment getRightOpAssignment_2() { return cRightOpAssignment_2; }

		//NonExpr
		public RuleCall getRightOpNonExprParserRuleCall_2_0() { return cRightOpNonExprParserRuleCall_2_0; }
	}

	public class CastExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CastExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeQualifiedNameParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cOperandAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOperandValueParserRuleCall_3_0 = (RuleCall)cOperandAssignment_3.eContents().get(0);
		
		//CastExpr:
		//	"(" type=QualifiedName ")" operand=Value;
		public ParserRule getRule() { return rule; }

		//"(" type=QualifiedName ")" operand=Value
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//type=QualifiedName
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//QualifiedName
		public RuleCall getTypeQualifiedNameParserRuleCall_1_0() { return cTypeQualifiedNameParserRuleCall_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }

		//operand=Value
		public Assignment getOperandAssignment_3() { return cOperandAssignment_3; }

		//Value
		public RuleCall getOperandValueParserRuleCall_3_0() { return cOperandValueParserRuleCall_3_0; }
	}

	public class InstanceOfExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InstanceOfExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOperandAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOperandRefParserRuleCall_0_0 = (RuleCall)cOperandAssignment_0.eContents().get(0);
		private final Keyword cInstanceofKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeQualifiedNameParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		
		//InstanceOfExpr:
		//	operand=Ref "instanceof" type=QualifiedName;
		public ParserRule getRule() { return rule; }

		//operand=Ref "instanceof" type=QualifiedName
		public Group getGroup() { return cGroup; }

		//operand=Ref
		public Assignment getOperandAssignment_0() { return cOperandAssignment_0; }

		//Ref
		public RuleCall getOperandRefParserRuleCall_0_0() { return cOperandRefParserRuleCall_0_0; }

		//"instanceof"
		public Keyword getInstanceofKeyword_1() { return cInstanceofKeyword_1; }

		//type=QualifiedName
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//QualifiedName
		public RuleCall getTypeQualifiedNameParserRuleCall_2_0() { return cTypeQualifiedNameParserRuleCall_2_0; }
	}

	public class SootMethodRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SootMethodRef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLessThanSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cClassAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cClassQualifiedNameParserRuleCall_1_0 = (RuleCall)cClassAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeQualifiedNameParserRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		private final Assignment cNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNameMethodNameParserRuleCall_4_0 = (RuleCall)cNameAssignment_4.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Assignment cParametersAssignment_6_0 = (Assignment)cGroup_6.eContents().get(0);
		private final RuleCall cParametersQualifiedNameParserRuleCall_6_0_0 = (RuleCall)cParametersAssignment_6_0.eContents().get(0);
		private final Group cGroup_6_1 = (Group)cGroup_6.eContents().get(1);
		private final Keyword cCommaKeyword_6_1_0 = (Keyword)cGroup_6_1.eContents().get(0);
		private final Assignment cParametersAssignment_6_1_1 = (Assignment)cGroup_6_1.eContents().get(1);
		private final RuleCall cParametersQualifiedNameParserRuleCall_6_1_1_0 = (RuleCall)cParametersAssignment_6_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cGreaterThanSignKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//SootMethodRef:
		//	"<" class=QualifiedName ":" type=QualifiedName name=MethodName "(" (parameters+=QualifiedName (","
		//	parameters+=QualifiedName)*)? ")" ">";
		public ParserRule getRule() { return rule; }

		//"<" class=QualifiedName ":" type=QualifiedName name=MethodName "(" (parameters+=QualifiedName (","
		//parameters+=QualifiedName)*)? ")" ">"
		public Group getGroup() { return cGroup; }

		//"<"
		public Keyword getLessThanSignKeyword_0() { return cLessThanSignKeyword_0; }

		//class=QualifiedName
		public Assignment getClassAssignment_1() { return cClassAssignment_1; }

		//QualifiedName
		public RuleCall getClassQualifiedNameParserRuleCall_1_0() { return cClassQualifiedNameParserRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//type=QualifiedName
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }

		//QualifiedName
		public RuleCall getTypeQualifiedNameParserRuleCall_3_0() { return cTypeQualifiedNameParserRuleCall_3_0; }

		//name=MethodName
		public Assignment getNameAssignment_4() { return cNameAssignment_4; }

		//MethodName
		public RuleCall getNameMethodNameParserRuleCall_4_0() { return cNameMethodNameParserRuleCall_4_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_5() { return cLeftParenthesisKeyword_5; }

		//(parameters+=QualifiedName ("," parameters+=QualifiedName)*)?
		public Group getGroup_6() { return cGroup_6; }

		//parameters+=QualifiedName
		public Assignment getParametersAssignment_6_0() { return cParametersAssignment_6_0; }

		//QualifiedName
		public RuleCall getParametersQualifiedNameParserRuleCall_6_0_0() { return cParametersQualifiedNameParserRuleCall_6_0_0; }

		//("," parameters+=QualifiedName)*
		public Group getGroup_6_1() { return cGroup_6_1; }

		//","
		public Keyword getCommaKeyword_6_1_0() { return cCommaKeyword_6_1_0; }

		//parameters+=QualifiedName
		public Assignment getParametersAssignment_6_1_1() { return cParametersAssignment_6_1_1; }

		//QualifiedName
		public RuleCall getParametersQualifiedNameParserRuleCall_6_1_1_0() { return cParametersQualifiedNameParserRuleCall_6_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }

		//">"
		public Keyword getGreaterThanSignKeyword_8() { return cGreaterThanSignKeyword_8; }
	}

	public class InvokeExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InvokeExpr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cInstanceInvokeExprParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStaticInvokeExprParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//InvokeExpr:
		//	InstanceInvokeExpr | StaticInvokeExpr;
		public ParserRule getRule() { return rule; }

		//InstanceInvokeExpr | StaticInvokeExpr
		public Alternatives getAlternatives() { return cAlternatives; }

		//InstanceInvokeExpr
		public RuleCall getInstanceInvokeExprParserRuleCall_0() { return cInstanceInvokeExprParserRuleCall_0; }

		//StaticInvokeExpr
		public RuleCall getStaticInvokeExprParserRuleCall_1() { return cStaticInvokeExprParserRuleCall_1; }
	}

	public class InstanceInvokeExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InstanceInvokeExpr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cInterfaceInvokeExprParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSpecialInvokeExprParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cVirtualInvokeExprParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//InstanceInvokeExpr:
		//	InterfaceInvokeExpr | SpecialInvokeExpr | VirtualInvokeExpr;
		public ParserRule getRule() { return rule; }

		//InterfaceInvokeExpr | SpecialInvokeExpr | VirtualInvokeExpr
		public Alternatives getAlternatives() { return cAlternatives; }

		//InterfaceInvokeExpr
		public RuleCall getInterfaceInvokeExprParserRuleCall_0() { return cInterfaceInvokeExprParserRuleCall_0; }

		//SpecialInvokeExpr
		public RuleCall getSpecialInvokeExprParserRuleCall_1() { return cSpecialInvokeExprParserRuleCall_1; }

		//VirtualInvokeExpr
		public RuleCall getVirtualInvokeExprParserRuleCall_2() { return cVirtualInvokeExprParserRuleCall_2; }
	}

	public class StaticInvokeExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StaticInvokeExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStaticInvokeExprAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cStaticinvokeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cMethodAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMethodSootMethodRefParserRuleCall_2_0 = (RuleCall)cMethodAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cParametersAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cParametersNonExprParserRuleCall_4_0_0 = (RuleCall)cParametersAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cParametersAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cParametersNonExprParserRuleCall_4_1_1_0 = (RuleCall)cParametersAssignment_4_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//StaticInvokeExpr:
		//	{StaticInvokeExpr} "staticinvoke" method=SootMethodRef "(" (parameters+=NonExpr ("," parameters+=NonExpr)*)? ")";
		public ParserRule getRule() { return rule; }

		//{StaticInvokeExpr} "staticinvoke" method=SootMethodRef "(" (parameters+=NonExpr ("," parameters+=NonExpr)*)? ")"
		public Group getGroup() { return cGroup; }

		//{StaticInvokeExpr}
		public Action getStaticInvokeExprAction_0() { return cStaticInvokeExprAction_0; }

		//"staticinvoke"
		public Keyword getStaticinvokeKeyword_1() { return cStaticinvokeKeyword_1; }

		//method=SootMethodRef
		public Assignment getMethodAssignment_2() { return cMethodAssignment_2; }

		//SootMethodRef
		public RuleCall getMethodSootMethodRefParserRuleCall_2_0() { return cMethodSootMethodRefParserRuleCall_2_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }

		//(parameters+=NonExpr ("," parameters+=NonExpr)*)?
		public Group getGroup_4() { return cGroup_4; }

		//parameters+=NonExpr
		public Assignment getParametersAssignment_4_0() { return cParametersAssignment_4_0; }

		//NonExpr
		public RuleCall getParametersNonExprParserRuleCall_4_0_0() { return cParametersNonExprParserRuleCall_4_0_0; }

		//("," parameters+=NonExpr)*
		public Group getGroup_4_1() { return cGroup_4_1; }

		//","
		public Keyword getCommaKeyword_4_1_0() { return cCommaKeyword_4_1_0; }

		//parameters+=NonExpr
		public Assignment getParametersAssignment_4_1_1() { return cParametersAssignment_4_1_1; }

		//NonExpr
		public RuleCall getParametersNonExprParserRuleCall_4_1_1_0() { return cParametersNonExprParserRuleCall_4_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}

	public class InterfaceInvokeExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InterfaceInvokeExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInterfaceinvokeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cBaseAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBaseLocalOrWildcardParserRuleCall_1_0 = (RuleCall)cBaseAssignment_1.eContents().get(0);
		private final Keyword cFullStopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cMethodAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMethodSootMethodRefParserRuleCall_3_0 = (RuleCall)cMethodAssignment_3.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Assignment cParametersAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cParametersNonExprParserRuleCall_5_0_0 = (RuleCall)cParametersAssignment_5_0.eContents().get(0);
		private final Group cGroup_5_1 = (Group)cGroup_5.eContents().get(1);
		private final Keyword cCommaKeyword_5_1_0 = (Keyword)cGroup_5_1.eContents().get(0);
		private final Assignment cParametersAssignment_5_1_1 = (Assignment)cGroup_5_1.eContents().get(1);
		private final RuleCall cParametersNonExprParserRuleCall_5_1_1_0 = (RuleCall)cParametersAssignment_5_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//InterfaceInvokeExpr:
		//	"interfaceinvoke" base=LocalOrWildcard "." method=SootMethodRef "(" (parameters+=NonExpr ("," parameters+=NonExpr)*)?
		//	")";
		public ParserRule getRule() { return rule; }

		//"interfaceinvoke" base=LocalOrWildcard "." method=SootMethodRef "(" (parameters+=NonExpr ("," parameters+=NonExpr)*)?
		//")"
		public Group getGroup() { return cGroup; }

		//"interfaceinvoke"
		public Keyword getInterfaceinvokeKeyword_0() { return cInterfaceinvokeKeyword_0; }

		//base=LocalOrWildcard
		public Assignment getBaseAssignment_1() { return cBaseAssignment_1; }

		//LocalOrWildcard
		public RuleCall getBaseLocalOrWildcardParserRuleCall_1_0() { return cBaseLocalOrWildcardParserRuleCall_1_0; }

		//"."
		public Keyword getFullStopKeyword_2() { return cFullStopKeyword_2; }

		//method=SootMethodRef
		public Assignment getMethodAssignment_3() { return cMethodAssignment_3; }

		//SootMethodRef
		public RuleCall getMethodSootMethodRefParserRuleCall_3_0() { return cMethodSootMethodRefParserRuleCall_3_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_4() { return cLeftParenthesisKeyword_4; }

		//(parameters+=NonExpr ("," parameters+=NonExpr)*)?
		public Group getGroup_5() { return cGroup_5; }

		//parameters+=NonExpr
		public Assignment getParametersAssignment_5_0() { return cParametersAssignment_5_0; }

		//NonExpr
		public RuleCall getParametersNonExprParserRuleCall_5_0_0() { return cParametersNonExprParserRuleCall_5_0_0; }

		//("," parameters+=NonExpr)*
		public Group getGroup_5_1() { return cGroup_5_1; }

		//","
		public Keyword getCommaKeyword_5_1_0() { return cCommaKeyword_5_1_0; }

		//parameters+=NonExpr
		public Assignment getParametersAssignment_5_1_1() { return cParametersAssignment_5_1_1; }

		//NonExpr
		public RuleCall getParametersNonExprParserRuleCall_5_1_1_0() { return cParametersNonExprParserRuleCall_5_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}

	public class SpecialInvokeExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SpecialInvokeExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSpecialinvokeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cBaseAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBaseLocalOrWildcardParserRuleCall_1_0 = (RuleCall)cBaseAssignment_1.eContents().get(0);
		private final Keyword cFullStopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cMethodAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMethodSootMethodRefParserRuleCall_3_0 = (RuleCall)cMethodAssignment_3.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Assignment cParametersAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cParametersNonExprParserRuleCall_5_0_0 = (RuleCall)cParametersAssignment_5_0.eContents().get(0);
		private final Group cGroup_5_1 = (Group)cGroup_5.eContents().get(1);
		private final Keyword cCommaKeyword_5_1_0 = (Keyword)cGroup_5_1.eContents().get(0);
		private final Assignment cParametersAssignment_5_1_1 = (Assignment)cGroup_5_1.eContents().get(1);
		private final RuleCall cParametersNonExprParserRuleCall_5_1_1_0 = (RuleCall)cParametersAssignment_5_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//SpecialInvokeExpr:
		//	"specialinvoke" base=LocalOrWildcard "." method=SootMethodRef "(" (parameters+=NonExpr ("," parameters+=NonExpr)*)?
		//	")";
		public ParserRule getRule() { return rule; }

		//"specialinvoke" base=LocalOrWildcard "." method=SootMethodRef "(" (parameters+=NonExpr ("," parameters+=NonExpr)*)? ")"
		public Group getGroup() { return cGroup; }

		//"specialinvoke"
		public Keyword getSpecialinvokeKeyword_0() { return cSpecialinvokeKeyword_0; }

		//base=LocalOrWildcard
		public Assignment getBaseAssignment_1() { return cBaseAssignment_1; }

		//LocalOrWildcard
		public RuleCall getBaseLocalOrWildcardParserRuleCall_1_0() { return cBaseLocalOrWildcardParserRuleCall_1_0; }

		//"."
		public Keyword getFullStopKeyword_2() { return cFullStopKeyword_2; }

		//method=SootMethodRef
		public Assignment getMethodAssignment_3() { return cMethodAssignment_3; }

		//SootMethodRef
		public RuleCall getMethodSootMethodRefParserRuleCall_3_0() { return cMethodSootMethodRefParserRuleCall_3_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_4() { return cLeftParenthesisKeyword_4; }

		//(parameters+=NonExpr ("," parameters+=NonExpr)*)?
		public Group getGroup_5() { return cGroup_5; }

		//parameters+=NonExpr
		public Assignment getParametersAssignment_5_0() { return cParametersAssignment_5_0; }

		//NonExpr
		public RuleCall getParametersNonExprParserRuleCall_5_0_0() { return cParametersNonExprParserRuleCall_5_0_0; }

		//("," parameters+=NonExpr)*
		public Group getGroup_5_1() { return cGroup_5_1; }

		//","
		public Keyword getCommaKeyword_5_1_0() { return cCommaKeyword_5_1_0; }

		//parameters+=NonExpr
		public Assignment getParametersAssignment_5_1_1() { return cParametersAssignment_5_1_1; }

		//NonExpr
		public RuleCall getParametersNonExprParserRuleCall_5_1_1_0() { return cParametersNonExprParserRuleCall_5_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}

	public class VirtualInvokeExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VirtualInvokeExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVirtualinvokeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cBaseAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBaseLocalOrWildcardParserRuleCall_1_0 = (RuleCall)cBaseAssignment_1.eContents().get(0);
		private final Keyword cFullStopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cMethodAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMethodSootMethodRefParserRuleCall_3_0 = (RuleCall)cMethodAssignment_3.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Assignment cParametersAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cParametersNonExprParserRuleCall_5_0_0 = (RuleCall)cParametersAssignment_5_0.eContents().get(0);
		private final Group cGroup_5_1 = (Group)cGroup_5.eContents().get(1);
		private final Keyword cCommaKeyword_5_1_0 = (Keyword)cGroup_5_1.eContents().get(0);
		private final Assignment cParametersAssignment_5_1_1 = (Assignment)cGroup_5_1.eContents().get(1);
		private final RuleCall cParametersNonExprParserRuleCall_5_1_1_0 = (RuleCall)cParametersAssignment_5_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//VirtualInvokeExpr:
		//	"virtualinvoke" base=LocalOrWildcard "." method=SootMethodRef "(" (parameters+=NonExpr ("," parameters+=NonExpr)*)?
		//	")";
		public ParserRule getRule() { return rule; }

		//"virtualinvoke" base=LocalOrWildcard "." method=SootMethodRef "(" (parameters+=NonExpr ("," parameters+=NonExpr)*)? ")"
		public Group getGroup() { return cGroup; }

		//"virtualinvoke"
		public Keyword getVirtualinvokeKeyword_0() { return cVirtualinvokeKeyword_0; }

		//base=LocalOrWildcard
		public Assignment getBaseAssignment_1() { return cBaseAssignment_1; }

		//LocalOrWildcard
		public RuleCall getBaseLocalOrWildcardParserRuleCall_1_0() { return cBaseLocalOrWildcardParserRuleCall_1_0; }

		//"."
		public Keyword getFullStopKeyword_2() { return cFullStopKeyword_2; }

		//method=SootMethodRef
		public Assignment getMethodAssignment_3() { return cMethodAssignment_3; }

		//SootMethodRef
		public RuleCall getMethodSootMethodRefParserRuleCall_3_0() { return cMethodSootMethodRefParserRuleCall_3_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_4() { return cLeftParenthesisKeyword_4; }

		//(parameters+=NonExpr ("," parameters+=NonExpr)*)?
		public Group getGroup_5() { return cGroup_5; }

		//parameters+=NonExpr
		public Assignment getParametersAssignment_5_0() { return cParametersAssignment_5_0; }

		//NonExpr
		public RuleCall getParametersNonExprParserRuleCall_5_0_0() { return cParametersNonExprParserRuleCall_5_0_0; }

		//("," parameters+=NonExpr)*
		public Group getGroup_5_1() { return cGroup_5_1; }

		//","
		public Keyword getCommaKeyword_5_1_0() { return cCommaKeyword_5_1_0; }

		//parameters+=NonExpr
		public Assignment getParametersAssignment_5_1_1() { return cParametersAssignment_5_1_1; }

		//NonExpr
		public RuleCall getParametersNonExprParserRuleCall_5_1_1_0() { return cParametersNonExprParserRuleCall_5_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}

	public class LocalOrWildcardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LocalOrWildcard");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLocalParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cWildcardParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//LocalOrWildcard:
		//	Local | Wildcard;
		public ParserRule getRule() { return rule; }

		//Local | Wildcard
		public Alternatives getAlternatives() { return cAlternatives; }

		//Local
		public RuleCall getLocalParserRuleCall_0() { return cLocalParserRuleCall_0; }

		//Wildcard
		public RuleCall getWildcardParserRuleCall_1() { return cWildcardParserRuleCall_1; }
	}

	public class WildcardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Wildcard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftPointingDoubleAngleQuotationMarkKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cRightPointingDoubleAngleQuotationMarkKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Wildcard:
		//	"«" name=ID "»";
		public ParserRule getRule() { return rule; }

		//"«" name=ID "»"
		public Group getGroup() { return cGroup; }

		//"«"
		public Keyword getLeftPointingDoubleAngleQuotationMarkKeyword_0() { return cLeftPointingDoubleAngleQuotationMarkKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"»"
		public Keyword getRightPointingDoubleAngleQuotationMarkKeyword_2() { return cRightPointingDoubleAngleQuotationMarkKeyword_2; }
	}

	public class NewArrayExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NewArrayExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNewarrayKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeQualifiedNameParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cSizeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cSizeDimensionParserRuleCall_4_0 = (RuleCall)cSizeAssignment_4.eContents().get(0);
		
		//NewArrayExpr:
		//	"newarray" "(" type=QualifiedName ")" size=Dimension;
		public ParserRule getRule() { return rule; }

		//"newarray" "(" type=QualifiedName ")" size=Dimension
		public Group getGroup() { return cGroup; }

		//"newarray"
		public Keyword getNewarrayKeyword_0() { return cNewarrayKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//type=QualifiedName
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//QualifiedName
		public RuleCall getTypeQualifiedNameParserRuleCall_2_0() { return cTypeQualifiedNameParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//size=Dimension
		public Assignment getSizeAssignment_4() { return cSizeAssignment_4; }

		//Dimension
		public RuleCall getSizeDimensionParserRuleCall_4_0() { return cSizeDimensionParserRuleCall_4_0; }
	}

	public class NewExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NewExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNewKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeQualifiedNameParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		
		//NewExpr:
		//	"new" type=QualifiedName;
		public ParserRule getRule() { return rule; }

		//"new" type=QualifiedName
		public Group getGroup() { return cGroup; }

		//"new"
		public Keyword getNewKeyword_0() { return cNewKeyword_0; }

		//type=QualifiedName
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//QualifiedName
		public RuleCall getTypeQualifiedNameParserRuleCall_1_0() { return cTypeQualifiedNameParserRuleCall_1_0; }
	}

	public class NewMultiArrayExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NewMultiArrayExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNewmultiarrayKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeQualifiedNameParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cSizeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cSizeDimensionParserRuleCall_4_0 = (RuleCall)cSizeAssignment_4.eContents().get(0);
		private final Assignment cEmptySizeAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final Keyword cEmptySizeLeftSquareBracketRightSquareBracketKeyword_5_0 = (Keyword)cEmptySizeAssignment_5.eContents().get(0);
		
		//NewMultiArrayExpr:
		//	"newmultiarray" "(" type=QualifiedName ")" size+=Dimension* emptySize+="[]"*;
		public ParserRule getRule() { return rule; }

		//"newmultiarray" "(" type=QualifiedName ")" size+=Dimension* emptySize+="[]"*
		public Group getGroup() { return cGroup; }

		//"newmultiarray"
		public Keyword getNewmultiarrayKeyword_0() { return cNewmultiarrayKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//type=QualifiedName
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//QualifiedName
		public RuleCall getTypeQualifiedNameParserRuleCall_2_0() { return cTypeQualifiedNameParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//size+=Dimension*
		public Assignment getSizeAssignment_4() { return cSizeAssignment_4; }

		//Dimension
		public RuleCall getSizeDimensionParserRuleCall_4_0() { return cSizeDimensionParserRuleCall_4_0; }

		//emptySize+="[]"*
		public Assignment getEmptySizeAssignment_5() { return cEmptySizeAssignment_5; }

		//"[]"
		public Keyword getEmptySizeLeftSquareBracketRightSquareBracketKeyword_5_0() { return cEmptySizeLeftSquareBracketRightSquareBracketKeyword_5_0; }
	}

	public class DimensionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Dimension");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSizeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSizeINTTerminalRuleCall_1_0 = (RuleCall)cSizeAssignment_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Dimension:
		//	"[" size=INT "]";
		public ParserRule getRule() { return rule; }

		//"[" size=INT "]"
		public Group getGroup() { return cGroup; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }

		//size=INT
		public Assignment getSizeAssignment_1() { return cSizeAssignment_1; }

		//INT
		public RuleCall getSizeINTTerminalRuleCall_1_0() { return cSizeINTTerminalRuleCall_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_2() { return cRightSquareBracketKeyword_2; }
	}

	public class UnopExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnopExpr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLengthExprParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNegExprParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//UnopExpr:
		//	LengthExpr | NegExpr;
		public ParserRule getRule() { return rule; }

		//LengthExpr | NegExpr
		public Alternatives getAlternatives() { return cAlternatives; }

		//LengthExpr
		public RuleCall getLengthExprParserRuleCall_0() { return cLengthExprParserRuleCall_0; }

		//NegExpr
		public RuleCall getNegExprParserRuleCall_1() { return cNegExprParserRuleCall_1; }
	}

	public class LengthExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LengthExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLengthofKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cOperandAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOperandValueParserRuleCall_1_0 = (RuleCall)cOperandAssignment_1.eContents().get(0);
		
		//LengthExpr:
		//	"lengthof" operand=Value;
		public ParserRule getRule() { return rule; }

		//"lengthof" operand=Value
		public Group getGroup() { return cGroup; }

		//"lengthof"
		public Keyword getLengthofKeyword_0() { return cLengthofKeyword_0; }

		//operand=Value
		public Assignment getOperandAssignment_1() { return cOperandAssignment_1; }

		//Value
		public RuleCall getOperandValueParserRuleCall_1_0() { return cOperandValueParserRuleCall_1_0; }
	}

	public class NegExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NegExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNegKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cOperandAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOperandValueParserRuleCall_1_0 = (RuleCall)cOperandAssignment_1.eContents().get(0);
		
		//NegExpr:
		//	"neg" operand=Value;
		public ParserRule getRule() { return rule; }

		//"neg" operand=Value
		public Group getGroup() { return cGroup; }

		//"neg"
		public Keyword getNegKeyword_0() { return cNegKeyword_0; }

		//operand=Value
		public Assignment getOperandAssignment_1() { return cOperandAssignment_1; }

		//Value
		public RuleCall getOperandValueParserRuleCall_1_0() { return cOperandValueParserRuleCall_1_0; }
	}

	public class LocalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Local");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Local:
		//	name=ID;
		public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}

	public class RefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Ref");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cConcreteRefParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIdentityRefParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cLocalOrWildcardParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Ref:
		//	ConcreteRef | IdentityRef | LocalOrWildcard;
		public ParserRule getRule() { return rule; }

		//ConcreteRef | IdentityRef | LocalOrWildcard
		public Alternatives getAlternatives() { return cAlternatives; }

		//ConcreteRef
		public RuleCall getConcreteRefParserRuleCall_0() { return cConcreteRefParserRuleCall_0; }

		//IdentityRef
		public RuleCall getIdentityRefParserRuleCall_1() { return cIdentityRefParserRuleCall_1; }

		//LocalOrWildcard
		public RuleCall getLocalOrWildcardParserRuleCall_2() { return cLocalOrWildcardParserRuleCall_2; }
	}

	public class IdentityRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IdentityRef");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cParameterRefParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cThisRefParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cCaughtExceptionRefParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//IdentityRef:
		//	ParameterRef | ThisRef | CaughtExceptionRef;
		public ParserRule getRule() { return rule; }

		//ParameterRef | ThisRef | CaughtExceptionRef
		public Alternatives getAlternatives() { return cAlternatives; }

		//ParameterRef
		public RuleCall getParameterRefParserRuleCall_0() { return cParameterRefParserRuleCall_0; }

		//ThisRef
		public RuleCall getThisRefParserRuleCall_1() { return cThisRefParserRuleCall_1; }

		//CaughtExceptionRef
		public RuleCall getCaughtExceptionRefParserRuleCall_2() { return cCaughtExceptionRefParserRuleCall_2; }
	}

	public class ParameterRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParameterRef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCommercialAtKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeQualifiedNameParserRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		
		//ParameterRef:
		//	"@" name=ID ":" type=QualifiedName;
		public ParserRule getRule() { return rule; }

		//"@" name=ID ":" type=QualifiedName
		public Group getGroup() { return cGroup; }

		//"@"
		public Keyword getCommercialAtKeyword_0() { return cCommercialAtKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//type=QualifiedName
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }

		//QualifiedName
		public RuleCall getTypeQualifiedNameParserRuleCall_3_0() { return cTypeQualifiedNameParserRuleCall_3_0; }
	}

	public class ThisRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ThisRef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCommercialAtKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cThisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeQualifiedNameParserRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		
		//ThisRef:
		//	"@" "this" ":" type=QualifiedName;
		public ParserRule getRule() { return rule; }

		//"@" "this" ":" type=QualifiedName
		public Group getGroup() { return cGroup; }

		//"@"
		public Keyword getCommercialAtKeyword_0() { return cCommercialAtKeyword_0; }

		//"this"
		public Keyword getThisKeyword_1() { return cThisKeyword_1; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//type=QualifiedName
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }

		//QualifiedName
		public RuleCall getTypeQualifiedNameParserRuleCall_3_0() { return cTypeQualifiedNameParserRuleCall_3_0; }
	}

	public class CaughtExceptionRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CaughtExceptionRef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCaughtExceptionRefAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cCommercialAtKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cCaughtexceptionKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//CaughtExceptionRef:
		//	{CaughtExceptionRef} "@" "caughtexception";
		public ParserRule getRule() { return rule; }

		//{CaughtExceptionRef} "@" "caughtexception"
		public Group getGroup() { return cGroup; }

		//{CaughtExceptionRef}
		public Action getCaughtExceptionRefAction_0() { return cCaughtExceptionRefAction_0; }

		//"@"
		public Keyword getCommercialAtKeyword_1() { return cCommercialAtKeyword_1; }

		//"caughtexception"
		public Keyword getCaughtexceptionKeyword_2() { return cCaughtexceptionKeyword_2; }
	}

	public class ConcreteRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConcreteRef");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cArrayRefParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFieldRefParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ConcreteRef:
		//	ArrayRef | FieldRef;
		public ParserRule getRule() { return rule; }

		//ArrayRef | FieldRef
		public Alternatives getAlternatives() { return cAlternatives; }

		//ArrayRef
		public RuleCall getArrayRefParserRuleCall_0() { return cArrayRefParserRuleCall_0; }

		//FieldRef
		public RuleCall getFieldRefParserRuleCall_1() { return cFieldRefParserRuleCall_1; }
	}

	public class ArrayRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ArrayRef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cBaseAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cBaseLocalOrWildcardParserRuleCall_0_0 = (RuleCall)cBaseAssignment_0.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cIndexAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIndexNonExprParserRuleCall_2_0 = (RuleCall)cIndexAssignment_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ArrayRef:
		//	base=LocalOrWildcard "[" index=NonExpr "]";
		public ParserRule getRule() { return rule; }

		//base=LocalOrWildcard "[" index=NonExpr "]"
		public Group getGroup() { return cGroup; }

		//base=LocalOrWildcard
		public Assignment getBaseAssignment_0() { return cBaseAssignment_0; }

		//LocalOrWildcard
		public RuleCall getBaseLocalOrWildcardParserRuleCall_0_0() { return cBaseLocalOrWildcardParserRuleCall_0_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }

		//index=NonExpr
		public Assignment getIndexAssignment_2() { return cIndexAssignment_2; }

		//NonExpr
		public RuleCall getIndexNonExprParserRuleCall_2_0() { return cIndexNonExprParserRuleCall_2_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}

	public class FieldRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FieldRef");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStaticFieldRefParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cInstanceFieldRefParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//FieldRef:
		//	StaticFieldRef | InstanceFieldRef;
		public ParserRule getRule() { return rule; }

		//StaticFieldRef | InstanceFieldRef
		public Alternatives getAlternatives() { return cAlternatives; }

		//StaticFieldRef
		public RuleCall getStaticFieldRefParserRuleCall_0() { return cStaticFieldRefParserRuleCall_0; }

		//InstanceFieldRef
		public RuleCall getInstanceFieldRefParserRuleCall_1() { return cInstanceFieldRefParserRuleCall_1; }
	}

	public class StaticFieldRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StaticFieldRef");
		private final Assignment cFieldRefAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cFieldRefSootFieldRefParserRuleCall_0 = (RuleCall)cFieldRefAssignment.eContents().get(0);
		
		//StaticFieldRef:
		//	fieldRef=SootFieldRef;
		public ParserRule getRule() { return rule; }

		//fieldRef=SootFieldRef
		public Assignment getFieldRefAssignment() { return cFieldRefAssignment; }

		//SootFieldRef
		public RuleCall getFieldRefSootFieldRefParserRuleCall_0() { return cFieldRefSootFieldRefParserRuleCall_0; }
	}

	public class SootFieldRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SootFieldRef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLessThanSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cClassAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cClassQualifiedNameParserRuleCall_1_0 = (RuleCall)cClassAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeQualifiedNameParserRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		private final Assignment cNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNameIDTerminalRuleCall_4_0 = (RuleCall)cNameAssignment_4.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//SootFieldRef:
		//	"<" class=QualifiedName ":" Type=QualifiedName name=ID ">";
		public ParserRule getRule() { return rule; }

		//"<" class=QualifiedName ":" Type=QualifiedName name=ID ">"
		public Group getGroup() { return cGroup; }

		//"<"
		public Keyword getLessThanSignKeyword_0() { return cLessThanSignKeyword_0; }

		//class=QualifiedName
		public Assignment getClassAssignment_1() { return cClassAssignment_1; }

		//QualifiedName
		public RuleCall getClassQualifiedNameParserRuleCall_1_0() { return cClassQualifiedNameParserRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//Type=QualifiedName
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }

		//QualifiedName
		public RuleCall getTypeQualifiedNameParserRuleCall_3_0() { return cTypeQualifiedNameParserRuleCall_3_0; }

		//name=ID
		public Assignment getNameAssignment_4() { return cNameAssignment_4; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_4_0() { return cNameIDTerminalRuleCall_4_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_5() { return cGreaterThanSignKeyword_5; }
	}

	public class InstanceFieldRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InstanceFieldRef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cBaseAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cBaseLocalOrWildcardParserRuleCall_0_0 = (RuleCall)cBaseAssignment_0.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFieldRefAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFieldRefFieldRefParserRuleCall_2_0 = (RuleCall)cFieldRefAssignment_2.eContents().get(0);
		
		//InstanceFieldRef:
		//	base=LocalOrWildcard "." fieldRef=FieldRef;
		public ParserRule getRule() { return rule; }

		//base=LocalOrWildcard "." fieldRef=FieldRef
		public Group getGroup() { return cGroup; }

		//base=LocalOrWildcard
		public Assignment getBaseAssignment_0() { return cBaseAssignment_0; }

		//LocalOrWildcard
		public RuleCall getBaseLocalOrWildcardParserRuleCall_0_0() { return cBaseLocalOrWildcardParserRuleCall_0_0; }

		//"."
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }

		//fieldRef=FieldRef
		public Assignment getFieldRefAssignment_2() { return cFieldRefAssignment_2; }

		//FieldRef
		public RuleCall getFieldRefFieldRefParserRuleCall_2_0() { return cFieldRefFieldRefParserRuleCall_2_0; }
	}

	public class ConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Constant");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cClassConstantParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNullConstantParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cNumericConstantParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cStringConstantParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Constant:
		//	ClassConstant | NullConstant | NumericConstant | StringConstant;
		public ParserRule getRule() { return rule; }

		//ClassConstant | NullConstant | NumericConstant | StringConstant
		public Alternatives getAlternatives() { return cAlternatives; }

		//ClassConstant
		public RuleCall getClassConstantParserRuleCall_0() { return cClassConstantParserRuleCall_0; }

		//NullConstant
		public RuleCall getNullConstantParserRuleCall_1() { return cNullConstantParserRuleCall_1; }

		//NumericConstant
		public RuleCall getNumericConstantParserRuleCall_2() { return cNumericConstantParserRuleCall_2; }

		//StringConstant
		public RuleCall getStringConstantParserRuleCall_3() { return cStringConstantParserRuleCall_3; }
	}

	public class ClassConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ClassConstant");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cClassKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//ClassConstant:
		//	"class" name=QualifiedName;
		public ParserRule getRule() { return rule; }

		//"class" name=QualifiedName
		public Group getGroup() { return cGroup; }

		//"class"
		public Keyword getClassKeyword_0() { return cClassKeyword_0; }

		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }
	}

	public class NullConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NullConstant");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNullConstantAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cNullKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//NullConstant:
		//	{NullConstant} "null";
		public ParserRule getRule() { return rule; }

		//{NullConstant} "null"
		public Group getGroup() { return cGroup; }

		//{NullConstant}
		public Action getNullConstantAction_0() { return cNullConstantAction_0; }

		//"null"
		public Keyword getNullKeyword_1() { return cNullKeyword_1; }
	}

	public class NumericConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NumericConstant");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIntConstantParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLongConstantParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDoubleConstantParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cFloatConstantParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//NumericConstant:
		//	IntConstant | LongConstant | DoubleConstant | FloatConstant;
		public ParserRule getRule() { return rule; }

		//IntConstant | LongConstant | DoubleConstant | FloatConstant
		public Alternatives getAlternatives() { return cAlternatives; }

		//IntConstant
		public RuleCall getIntConstantParserRuleCall_0() { return cIntConstantParserRuleCall_0; }

		//LongConstant
		public RuleCall getLongConstantParserRuleCall_1() { return cLongConstantParserRuleCall_1; }

		//DoubleConstant
		public RuleCall getDoubleConstantParserRuleCall_2() { return cDoubleConstantParserRuleCall_2; }

		//FloatConstant
		public RuleCall getFloatConstantParserRuleCall_3() { return cFloatConstantParserRuleCall_3; }
	}

	public class IntConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntConstant");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//IntConstant:
		//	value=INT;
		public ParserRule getRule() { return rule; }

		//value=INT
		public Assignment getValueAssignment() { return cValueAssignment; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_0() { return cValueINTTerminalRuleCall_0; }
	}

	public class LongConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LongConstant");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cValueINTTerminalRuleCall_0_0 = (RuleCall)cValueAssignment_0.eContents().get(0);
		private final Keyword cLKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//LongConstant:
		//	value=INT "L";
		public ParserRule getRule() { return rule; }

		//value=INT "L"
		public Group getGroup() { return cGroup; }

		//value=INT
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_0_0() { return cValueINTTerminalRuleCall_0_0; }

		//"L"
		public Keyword getLKeyword_1() { return cLKeyword_1; }
	}

	public class DoubleConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DoubleConstant");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cValueINTTerminalRuleCall_0_0 = (RuleCall)cValueAssignment_0.eContents().get(0);
		private final Keyword cDKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//DoubleConstant:
		//	value=INT "D";
		public ParserRule getRule() { return rule; }

		//value=INT "D"
		public Group getGroup() { return cGroup; }

		//value=INT
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_0_0() { return cValueINTTerminalRuleCall_0_0; }

		//"D"
		public Keyword getDKeyword_1() { return cDKeyword_1; }
	}

	public class FloatConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FloatConstant");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cValueINTTerminalRuleCall_0_0 = (RuleCall)cValueAssignment_0.eContents().get(0);
		private final Keyword cFKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//FloatConstant:
		//	value=INT "F";
		public ParserRule getRule() { return rule; }

		//value=INT "F"
		public Group getGroup() { return cGroup; }

		//value=INT
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_0_0() { return cValueINTTerminalRuleCall_0_0; }

		//"F"
		public Keyword getFKeyword_1() { return cFKeyword_1; }
	}

	public class StringConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StringConstant");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//StringConstant:
		//	value=STRING;
		public ParserRule getRule() { return rule; }

		//value=STRING
		public Assignment getValueAssignment() { return cValueAssignment; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0() { return cValueSTRINGTerminalRuleCall_0; }
	}

	public class FieldNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FieldName");
		private final RuleCall cIDTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//FieldName:
		//	ID;
		public ParserRule getRule() { return rule; }

		//ID
		public RuleCall getIDTerminalRuleCall() { return cIDTerminalRuleCall; }
	}

	public class MethodNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MethodName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLessThanSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cGreaterThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//MethodName:
		//	"<"? ID ">"?;
		public ParserRule getRule() { return rule; }

		//"<"? ID ">"?
		public Group getGroup() { return cGroup; }

		//"<"?
		public Keyword getLessThanSignKeyword_0() { return cLessThanSignKeyword_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }

		//">"?
		public Keyword getGreaterThanSignKeyword_2() { return cGreaterThanSignKeyword_2; }
	}

	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//	ID ("." ID)*;
		public ParserRule getRule() { return rule; }

		//ID ("." ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//("." ID)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	
	
	public class VisibilityElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "Visibility");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cPackageEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cPackagePackageKeyword_0_0 = (Keyword)cPackageEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cPublicEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cPublicPublicKeyword_1_0 = (Keyword)cPublicEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cProtectedEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cProtectedProtectedKeyword_2_0 = (Keyword)cProtectedEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cPrivateEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cPrivatePrivateKeyword_3_0 = (Keyword)cPrivateEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum Visibility:
		//	package | public | protected | private;
		public EnumRule getRule() { return rule; }

		//package | public | protected | private
		public Alternatives getAlternatives() { return cAlternatives; }

		//package
		public EnumLiteralDeclaration getPackageEnumLiteralDeclaration_0() { return cPackageEnumLiteralDeclaration_0; }

		//"package"
		public Keyword getPackagePackageKeyword_0_0() { return cPackagePackageKeyword_0_0; }

		//public
		public EnumLiteralDeclaration getPublicEnumLiteralDeclaration_1() { return cPublicEnumLiteralDeclaration_1; }

		//"public"
		public Keyword getPublicPublicKeyword_1_0() { return cPublicPublicKeyword_1_0; }

		//protected
		public EnumLiteralDeclaration getProtectedEnumLiteralDeclaration_2() { return cProtectedEnumLiteralDeclaration_2; }

		//"protected"
		public Keyword getProtectedProtectedKeyword_2_0() { return cProtectedProtectedKeyword_2_0; }

		//private
		public EnumLiteralDeclaration getPrivateEnumLiteralDeclaration_3() { return cPrivateEnumLiteralDeclaration_3; }

		//"private"
		public Keyword getPrivatePrivateKeyword_3_0() { return cPrivatePrivateKeyword_3_0; }
	}
	
	private TransformationElements pTransformation;
	private PatternElements pPattern;
	private SequencePatternElements pSequencePattern;
	private MethodPatternElements pMethodPattern;
	private TypePatternElements pTypePattern;
	private ReplacementElements pReplacement;
	private TypeElements pType;
	private FieldElements pField;
	private MethodElements pMethod;
	private VisibilityElements unknownRuleVisibility;
	private BodyElements pBody;
	private StatementSequenceElements pStatementSequence;
	private DeclarationElements pDeclaration;
	private LabelOrStatementElements pLabelOrStatement;
	private StatementElements pStatement;
	private LabelElements pLabel;
	private BreakpointStmtElements pBreakpointStmt;
	private DefinitionStmtElements pDefinitionStmt;
	private AssignStmtElements pAssignStmt;
	private IdentityStmtElements pIdentityStmt;
	private GotoStmtElements pGotoStmt;
	private IfStmtElements pIfStmt;
	private InvokeStmtElements pInvokeStmt;
	private TableSwitchStmtElements pTableSwitchStmt;
	private LookupSwitchStmtElements pLookupSwitchStmt;
	private MonitorStmtElements pMonitorStmt;
	private EnterMonitorStmtElements pEnterMonitorStmt;
	private ExitMonitorStmtElements pExitMonitorStmt;
	private NopStmtElements pNopStmt;
	private RetStmtElements pRetStmt;
	private ReturnVoidStmtElements pReturnVoidStmt;
	private ReturnStmtElements pReturnStmt;
	private CaseElements pCase;
	private ThrowStmtElements pThrowStmt;
	private ValueElements pValue;
	private NonExprElements pNonExpr;
	private ExprElements pExpr;
	private AnyNewExprElements pAnyNewExpr;
	private BinOpExprElements pBinOpExpr;
	private AddExprElements pAddExpr;
	private AndExprElements pAndExpr;
	private CmpExprElements pCmpExpr;
	private CmpgExprElements pCmpgExpr;
	private CmplExprElements pCmplExpr;
	private ConditionalExprElements pConditionalExpr;
	private DivExprElements pDivExpr;
	private MulExprElements pMulExpr;
	private OrExprElements pOrExpr;
	private RemExprElements pRemExpr;
	private ShlExprElements pShlExpr;
	private ShrExprElements pShrExpr;
	private SubExprElements pSubExpr;
	private UshrExprElements pUshrExpr;
	private XorExprElements pXorExpr;
	private EqExprElements pEqExpr;
	private GeExprElements pGeExpr;
	private GtExprElements pGtExpr;
	private LeExprElements pLeExpr;
	private LtExprElements pLtExpr;
	private NeExprElements pNeExpr;
	private CastExprElements pCastExpr;
	private InstanceOfExprElements pInstanceOfExpr;
	private SootMethodRefElements pSootMethodRef;
	private InvokeExprElements pInvokeExpr;
	private InstanceInvokeExprElements pInstanceInvokeExpr;
	private StaticInvokeExprElements pStaticInvokeExpr;
	private InterfaceInvokeExprElements pInterfaceInvokeExpr;
	private SpecialInvokeExprElements pSpecialInvokeExpr;
	private VirtualInvokeExprElements pVirtualInvokeExpr;
	private LocalOrWildcardElements pLocalOrWildcard;
	private WildcardElements pWildcard;
	private NewArrayExprElements pNewArrayExpr;
	private NewExprElements pNewExpr;
	private NewMultiArrayExprElements pNewMultiArrayExpr;
	private DimensionElements pDimension;
	private UnopExprElements pUnopExpr;
	private LengthExprElements pLengthExpr;
	private NegExprElements pNegExpr;
	private LocalElements pLocal;
	private RefElements pRef;
	private IdentityRefElements pIdentityRef;
	private ParameterRefElements pParameterRef;
	private ThisRefElements pThisRef;
	private CaughtExceptionRefElements pCaughtExceptionRef;
	private ConcreteRefElements pConcreteRef;
	private ArrayRefElements pArrayRef;
	private FieldRefElements pFieldRef;
	private StaticFieldRefElements pStaticFieldRef;
	private SootFieldRefElements pSootFieldRef;
	private InstanceFieldRefElements pInstanceFieldRef;
	private ConstantElements pConstant;
	private ClassConstantElements pClassConstant;
	private NullConstantElements pNullConstant;
	private NumericConstantElements pNumericConstant;
	private IntConstantElements pIntConstant;
	private LongConstantElements pLongConstant;
	private DoubleConstantElements pDoubleConstant;
	private FloatConstantElements pFloatConstant;
	private StringConstantElements pStringConstant;
	private FieldNameElements pFieldName;
	private MethodNameElements pMethodName;
	private QualifiedNameElements pQualifiedName;
	private TerminalRule tLABELNAME;
	private TerminalRule tID;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public TransformationLanguageGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("soot.jimple.toolkits.transformation.dsl.TransformationLanguage".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Transformation:
	//	"«transformation»" "«replace»" pattern=Pattern "«end»" "«by»" replacement=Replacement "«end»" "«end»";
	public TransformationElements getTransformationAccess() {
		return (pTransformation != null) ? pTransformation : (pTransformation = new TransformationElements());
	}
	
	public ParserRule getTransformationRule() {
		return getTransformationAccess().getRule();
	}

	//Pattern:
	//	SequencePattern | MethodPattern | TypePattern;
	public PatternElements getPatternAccess() {
		return (pPattern != null) ? pPattern : (pPattern = new PatternElements());
	}
	
	public ParserRule getPatternRule() {
		return getPatternAccess().getRule();
	}

	//SequencePattern:
	//	sequence=StatementSequence;
	public SequencePatternElements getSequencePatternAccess() {
		return (pSequencePattern != null) ? pSequencePattern : (pSequencePattern = new SequencePatternElements());
	}
	
	public ParserRule getSequencePatternRule() {
		return getSequencePatternAccess().getRule();
	}

	//MethodPattern:
	//	method=Method;
	public MethodPatternElements getMethodPatternAccess() {
		return (pMethodPattern != null) ? pMethodPattern : (pMethodPattern = new MethodPatternElements());
	}
	
	public ParserRule getMethodPatternRule() {
		return getMethodPatternAccess().getRule();
	}

	//TypePattern:
	//	type=Type;
	public TypePatternElements getTypePatternAccess() {
		return (pTypePattern != null) ? pTypePattern : (pTypePattern = new TypePatternElements());
	}
	
	public ParserRule getTypePatternRule() {
		return getTypePatternAccess().getRule();
	}

	//Replacement:
	//	sequence=StatementSequence | method=Method | type=Type;
	public ReplacementElements getReplacementAccess() {
		return (pReplacement != null) ? pReplacement : (pReplacement = new ReplacementElements());
	}
	
	public ParserRule getReplacementRule() {
		return getReplacementAccess().getRule();
	}

	//// Jimple part
	//Type:
	//	visibility=Visibility? (class?="class" | interface?="interface") name=QualifiedName ("extends"
	//	superClass=QualifiedName)? ("implements" interfaces+=QualifiedName ("," interfaces+=QualifiedName)*)? "{"
	//	fields+=Field* methods+=Method* "}";
	public TypeElements getTypeAccess() {
		return (pType != null) ? pType : (pType = new TypeElements());
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}

	//Field:
	//	visibility=Visibility? static?="static" type=QualifiedName name=ID ";";
	public FieldElements getFieldAccess() {
		return (pField != null) ? pField : (pField = new FieldElements());
	}
	
	public ParserRule getFieldRule() {
		return getFieldAccess().getRule();
	}

	//Method:
	//	visibility=Visibility? static?="static"? type=ID name=MethodName "(" (parameters+=QualifiedName (","
	//	parameters+=QualifiedName)*)? ")" body=Body;
	public MethodElements getMethodAccess() {
		return (pMethod != null) ? pMethod : (pMethod = new MethodElements());
	}
	
	public ParserRule getMethodRule() {
		return getMethodAccess().getRule();
	}

	//enum Visibility:
	//	package | public | protected | private;
	public VisibilityElements getVisibilityAccess() {
		return (unknownRuleVisibility != null) ? unknownRuleVisibility : (unknownRuleVisibility = new VisibilityElements());
	}
	
	public EnumRule getVisibilityRule() {
		return getVisibilityAccess().getRule();
	}

	//Body:
	//	{Body} "{" declarations+=Declaration* statements+=LabelOrStatement* "}";
	public BodyElements getBodyAccess() {
		return (pBody != null) ? pBody : (pBody = new BodyElements());
	}
	
	public ParserRule getBodyRule() {
		return getBodyAccess().getRule();
	}

	//StatementSequence:
	//	statements+=LabelOrStatement+;
	public StatementSequenceElements getStatementSequenceAccess() {
		return (pStatementSequence != null) ? pStatementSequence : (pStatementSequence = new StatementSequenceElements());
	}
	
	public ParserRule getStatementSequenceRule() {
		return getStatementSequenceAccess().getRule();
	}

	//// 
	//Declaration:
	//	type=QualifiedName locals+=ID ("," locals+=ID)* ";";
	public DeclarationElements getDeclarationAccess() {
		return (pDeclaration != null) ? pDeclaration : (pDeclaration = new DeclarationElements());
	}
	
	public ParserRule getDeclarationRule() {
		return getDeclarationAccess().getRule();
	}

	//LabelOrStatement:
	//	Label | Statement ";";
	public LabelOrStatementElements getLabelOrStatementAccess() {
		return (pLabelOrStatement != null) ? pLabelOrStatement : (pLabelOrStatement = new LabelOrStatementElements());
	}
	
	public ParserRule getLabelOrStatementRule() {
		return getLabelOrStatementAccess().getRule();
	}

	//Statement:
	//	BreakpointStmt | DefinitionStmt | GotoStmt | IfStmt | InvokeStmt | LookupSwitchStmt | MonitorStmt | NopStmt | RetStmt
	//	| ReturnVoidStmt | ReturnStmt | TableSwitchStmt;
	public StatementElements getStatementAccess() {
		return (pStatement != null) ? pStatement : (pStatement = new StatementElements());
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}

	//Label:
	//	name=LABELNAME ":";
	public LabelElements getLabelAccess() {
		return (pLabel != null) ? pLabel : (pLabel = new LabelElements());
	}
	
	public ParserRule getLabelRule() {
		return getLabelAccess().getRule();
	}

	//BreakpointStmt:
	//	{BreakpointStmt} "breakpoint";
	public BreakpointStmtElements getBreakpointStmtAccess() {
		return (pBreakpointStmt != null) ? pBreakpointStmt : (pBreakpointStmt = new BreakpointStmtElements());
	}
	
	public ParserRule getBreakpointStmtRule() {
		return getBreakpointStmtAccess().getRule();
	}

	//DefinitionStmt:
	//	AssignStmt | IdentityStmt;
	public DefinitionStmtElements getDefinitionStmtAccess() {
		return (pDefinitionStmt != null) ? pDefinitionStmt : (pDefinitionStmt = new DefinitionStmtElements());
	}
	
	public ParserRule getDefinitionStmtRule() {
		return getDefinitionStmtAccess().getRule();
	}

	//AssignStmt:
	//	lhs=Ref "=" rhs=Value;
	public AssignStmtElements getAssignStmtAccess() {
		return (pAssignStmt != null) ? pAssignStmt : (pAssignStmt = new AssignStmtElements());
	}
	
	public ParserRule getAssignStmtRule() {
		return getAssignStmtAccess().getRule();
	}

	//IdentityStmt:
	//	lhs=Local ":=" rhs=IdentityRef;
	public IdentityStmtElements getIdentityStmtAccess() {
		return (pIdentityStmt != null) ? pIdentityStmt : (pIdentityStmt = new IdentityStmtElements());
	}
	
	public ParserRule getIdentityStmtRule() {
		return getIdentityStmtAccess().getRule();
	}

	//GotoStmt:
	//	"goto" target=LABELNAME;
	public GotoStmtElements getGotoStmtAccess() {
		return (pGotoStmt != null) ? pGotoStmt : (pGotoStmt = new GotoStmtElements());
	}
	
	public ParserRule getGotoStmtRule() {
		return getGotoStmtAccess().getRule();
	}

	//IfStmt:
	//	"if" condition=ConditionalExpr then=GotoStmt;
	public IfStmtElements getIfStmtAccess() {
		return (pIfStmt != null) ? pIfStmt : (pIfStmt = new IfStmtElements());
	}
	
	public ParserRule getIfStmtRule() {
		return getIfStmtAccess().getRule();
	}

	//InvokeStmt:
	//	invokeExpr=InvokeExpr;
	public InvokeStmtElements getInvokeStmtAccess() {
		return (pInvokeStmt != null) ? pInvokeStmt : (pInvokeStmt = new InvokeStmtElements());
	}
	
	public ParserRule getInvokeStmtRule() {
		return getInvokeStmtAccess().getRule();
	}

	//TableSwitchStmt:
	//	"tableswitch" "(" key=Local ")" "{" (cases+=Case ";")* "default" ":" default=GotoStmt ";" "}";
	public TableSwitchStmtElements getTableSwitchStmtAccess() {
		return (pTableSwitchStmt != null) ? pTableSwitchStmt : (pTableSwitchStmt = new TableSwitchStmtElements());
	}
	
	public ParserRule getTableSwitchStmtRule() {
		return getTableSwitchStmtAccess().getRule();
	}

	//LookupSwitchStmt:
	//	{LookupSwitchStmt} "lookupswitch";
	public LookupSwitchStmtElements getLookupSwitchStmtAccess() {
		return (pLookupSwitchStmt != null) ? pLookupSwitchStmt : (pLookupSwitchStmt = new LookupSwitchStmtElements());
	}
	
	public ParserRule getLookupSwitchStmtRule() {
		return getLookupSwitchStmtAccess().getRule();
	}

	//MonitorStmt:
	//	EnterMonitorStmt | ExitMonitorStmt;
	public MonitorStmtElements getMonitorStmtAccess() {
		return (pMonitorStmt != null) ? pMonitorStmt : (pMonitorStmt = new MonitorStmtElements());
	}
	
	public ParserRule getMonitorStmtRule() {
		return getMonitorStmtAccess().getRule();
	}

	//EnterMonitorStmt:
	//	"entermonitor" operand=Value;
	public EnterMonitorStmtElements getEnterMonitorStmtAccess() {
		return (pEnterMonitorStmt != null) ? pEnterMonitorStmt : (pEnterMonitorStmt = new EnterMonitorStmtElements());
	}
	
	public ParserRule getEnterMonitorStmtRule() {
		return getEnterMonitorStmtAccess().getRule();
	}

	//ExitMonitorStmt:
	//	"exitmonitor" operand=Value;
	public ExitMonitorStmtElements getExitMonitorStmtAccess() {
		return (pExitMonitorStmt != null) ? pExitMonitorStmt : (pExitMonitorStmt = new ExitMonitorStmtElements());
	}
	
	public ParserRule getExitMonitorStmtRule() {
		return getExitMonitorStmtAccess().getRule();
	}

	//NopStmt:
	//	{NopStmt} "nop";
	public NopStmtElements getNopStmtAccess() {
		return (pNopStmt != null) ? pNopStmt : (pNopStmt = new NopStmtElements());
	}
	
	public ParserRule getNopStmtRule() {
		return getNopStmtAccess().getRule();
	}

	//RetStmt:
	//	"ret" target=Local;
	public RetStmtElements getRetStmtAccess() {
		return (pRetStmt != null) ? pRetStmt : (pRetStmt = new RetStmtElements());
	}
	
	public ParserRule getRetStmtRule() {
		return getRetStmtAccess().getRule();
	}

	//ReturnVoidStmt:
	//	{ReturnVoidStmt} "return";
	public ReturnVoidStmtElements getReturnVoidStmtAccess() {
		return (pReturnVoidStmt != null) ? pReturnVoidStmt : (pReturnVoidStmt = new ReturnVoidStmtElements());
	}
	
	public ParserRule getReturnVoidStmtRule() {
		return getReturnVoidStmtAccess().getRule();
	}

	//ReturnStmt:
	//	"return" operand=Value;
	public ReturnStmtElements getReturnStmtAccess() {
		return (pReturnStmt != null) ? pReturnStmt : (pReturnStmt = new ReturnStmtElements());
	}
	
	public ParserRule getReturnStmtRule() {
		return getReturnStmtAccess().getRule();
	}

	//Case:
	//	"case" value=INT ":" target=GotoStmt;
	public CaseElements getCaseAccess() {
		return (pCase != null) ? pCase : (pCase = new CaseElements());
	}
	
	public ParserRule getCaseRule() {
		return getCaseAccess().getRule();
	}

	//ThrowStmt:
	//	"throw" operand=Value;
	public ThrowStmtElements getThrowStmtAccess() {
		return (pThrowStmt != null) ? pThrowStmt : (pThrowStmt = new ThrowStmtElements());
	}
	
	public ParserRule getThrowStmtRule() {
		return getThrowStmtAccess().getRule();
	}

	//// Values
	//Value:
	//	NonExpr | Expr;
	public ValueElements getValueAccess() {
		return (pValue != null) ? pValue : (pValue = new ValueElements());
	}
	
	public ParserRule getValueRule() {
		return getValueAccess().getRule();
	}

	//NonExpr:
	//	Constant | Ref;
	public NonExprElements getNonExprAccess() {
		return (pNonExpr != null) ? pNonExpr : (pNonExpr = new NonExprElements());
	}
	
	public ParserRule getNonExprRule() {
		return getNonExprAccess().getRule();
	}

	//Expr:
	//	AnyNewExpr | BinOpExpr | CastExpr | InstanceOfExpr | InvokeExpr | UnopExpr;
	public ExprElements getExprAccess() {
		return (pExpr != null) ? pExpr : (pExpr = new ExprElements());
	}
	
	public ParserRule getExprRule() {
		return getExprAccess().getRule();
	}

	//AnyNewExpr:
	//	NewArrayExpr | NewExpr | NewMultiArrayExpr;
	public AnyNewExprElements getAnyNewExprAccess() {
		return (pAnyNewExpr != null) ? pAnyNewExpr : (pAnyNewExpr = new AnyNewExprElements());
	}
	
	public ParserRule getAnyNewExprRule() {
		return getAnyNewExprAccess().getRule();
	}

	//BinOpExpr:
	//	AddExpr | AndExpr | CmpExpr | CmpgExpr | CmplExpr | ConditionalExpr | DivExpr | MulExpr | OrExpr | RemExpr | ShlExpr |
	//	ShrExpr | SubExpr | UshrExpr | XorExpr;
	public BinOpExprElements getBinOpExprAccess() {
		return (pBinOpExpr != null) ? pBinOpExpr : (pBinOpExpr = new BinOpExprElements());
	}
	
	public ParserRule getBinOpExprRule() {
		return getBinOpExprAccess().getRule();
	}

	//AddExpr:
	//	leftOp=NonExpr "+" rightOp=NonExpr;
	public AddExprElements getAddExprAccess() {
		return (pAddExpr != null) ? pAddExpr : (pAddExpr = new AddExprElements());
	}
	
	public ParserRule getAddExprRule() {
		return getAddExprAccess().getRule();
	}

	//AndExpr:
	//	leftOp=NonExpr "&" rightOp=NonExpr;
	public AndExprElements getAndExprAccess() {
		return (pAndExpr != null) ? pAndExpr : (pAndExpr = new AndExprElements());
	}
	
	public ParserRule getAndExprRule() {
		return getAndExprAccess().getRule();
	}

	//CmpExpr:
	//	leftOp=NonExpr "cmp" rightOp=NonExpr;
	public CmpExprElements getCmpExprAccess() {
		return (pCmpExpr != null) ? pCmpExpr : (pCmpExpr = new CmpExprElements());
	}
	
	public ParserRule getCmpExprRule() {
		return getCmpExprAccess().getRule();
	}

	//CmpgExpr:
	//	leftOp=NonExpr "cmpg" rightOp=NonExpr;
	public CmpgExprElements getCmpgExprAccess() {
		return (pCmpgExpr != null) ? pCmpgExpr : (pCmpgExpr = new CmpgExprElements());
	}
	
	public ParserRule getCmpgExprRule() {
		return getCmpgExprAccess().getRule();
	}

	//CmplExpr:
	//	leftOp=NonExpr "cmpl" rightOp=NonExpr;
	public CmplExprElements getCmplExprAccess() {
		return (pCmplExpr != null) ? pCmplExpr : (pCmplExpr = new CmplExprElements());
	}
	
	public ParserRule getCmplExprRule() {
		return getCmplExprAccess().getRule();
	}

	//ConditionalExpr:
	//	EqExpr | GeExpr | GtExpr | LeExpr | LtExpr | NeExpr;
	public ConditionalExprElements getConditionalExprAccess() {
		return (pConditionalExpr != null) ? pConditionalExpr : (pConditionalExpr = new ConditionalExprElements());
	}
	
	public ParserRule getConditionalExprRule() {
		return getConditionalExprAccess().getRule();
	}

	//DivExpr:
	//	leftOp=NonExpr "/" rightOp=NonExpr;
	public DivExprElements getDivExprAccess() {
		return (pDivExpr != null) ? pDivExpr : (pDivExpr = new DivExprElements());
	}
	
	public ParserRule getDivExprRule() {
		return getDivExprAccess().getRule();
	}

	//MulExpr:
	//	leftOp=NonExpr "*" rightOp=NonExpr;
	public MulExprElements getMulExprAccess() {
		return (pMulExpr != null) ? pMulExpr : (pMulExpr = new MulExprElements());
	}
	
	public ParserRule getMulExprRule() {
		return getMulExprAccess().getRule();
	}

	//OrExpr:
	//	leftOp=NonExpr "|" rightOp=NonExpr;
	public OrExprElements getOrExprAccess() {
		return (pOrExpr != null) ? pOrExpr : (pOrExpr = new OrExprElements());
	}
	
	public ParserRule getOrExprRule() {
		return getOrExprAccess().getRule();
	}

	//RemExpr:
	//	leftOp=NonExpr "%" rightOp=NonExpr;
	public RemExprElements getRemExprAccess() {
		return (pRemExpr != null) ? pRemExpr : (pRemExpr = new RemExprElements());
	}
	
	public ParserRule getRemExprRule() {
		return getRemExprAccess().getRule();
	}

	//ShlExpr:
	//	leftOp=NonExpr "<<" rightOp=NonExpr;
	public ShlExprElements getShlExprAccess() {
		return (pShlExpr != null) ? pShlExpr : (pShlExpr = new ShlExprElements());
	}
	
	public ParserRule getShlExprRule() {
		return getShlExprAccess().getRule();
	}

	//ShrExpr:
	//	leftOp=NonExpr ">>" rightOp=NonExpr;
	public ShrExprElements getShrExprAccess() {
		return (pShrExpr != null) ? pShrExpr : (pShrExpr = new ShrExprElements());
	}
	
	public ParserRule getShrExprRule() {
		return getShrExprAccess().getRule();
	}

	//SubExpr:
	//	leftOp=NonExpr "-" rightOp=NonExpr;
	public SubExprElements getSubExprAccess() {
		return (pSubExpr != null) ? pSubExpr : (pSubExpr = new SubExprElements());
	}
	
	public ParserRule getSubExprRule() {
		return getSubExprAccess().getRule();
	}

	//UshrExpr:
	//	leftOp=NonExpr ">>>" rightOp=NonExpr;
	public UshrExprElements getUshrExprAccess() {
		return (pUshrExpr != null) ? pUshrExpr : (pUshrExpr = new UshrExprElements());
	}
	
	public ParserRule getUshrExprRule() {
		return getUshrExprAccess().getRule();
	}

	//XorExpr:
	//	leftOp=NonExpr "^" rightOp=NonExpr;
	public XorExprElements getXorExprAccess() {
		return (pXorExpr != null) ? pXorExpr : (pXorExpr = new XorExprElements());
	}
	
	public ParserRule getXorExprRule() {
		return getXorExprAccess().getRule();
	}

	//EqExpr:
	//	leftOp=NonExpr "==" rightOp=NonExpr;
	public EqExprElements getEqExprAccess() {
		return (pEqExpr != null) ? pEqExpr : (pEqExpr = new EqExprElements());
	}
	
	public ParserRule getEqExprRule() {
		return getEqExprAccess().getRule();
	}

	//GeExpr:
	//	leftOp=NonExpr ">=" rightOp=NonExpr;
	public GeExprElements getGeExprAccess() {
		return (pGeExpr != null) ? pGeExpr : (pGeExpr = new GeExprElements());
	}
	
	public ParserRule getGeExprRule() {
		return getGeExprAccess().getRule();
	}

	//GtExpr:
	//	leftOp=NonExpr ">" rightOp=NonExpr;
	public GtExprElements getGtExprAccess() {
		return (pGtExpr != null) ? pGtExpr : (pGtExpr = new GtExprElements());
	}
	
	public ParserRule getGtExprRule() {
		return getGtExprAccess().getRule();
	}

	//LeExpr:
	//	leftOp=NonExpr "<=" rightOp=NonExpr;
	public LeExprElements getLeExprAccess() {
		return (pLeExpr != null) ? pLeExpr : (pLeExpr = new LeExprElements());
	}
	
	public ParserRule getLeExprRule() {
		return getLeExprAccess().getRule();
	}

	//LtExpr:
	//	leftOp=NonExpr "<" rightOp=NonExpr;
	public LtExprElements getLtExprAccess() {
		return (pLtExpr != null) ? pLtExpr : (pLtExpr = new LtExprElements());
	}
	
	public ParserRule getLtExprRule() {
		return getLtExprAccess().getRule();
	}

	//NeExpr:
	//	leftOp=NonExpr "!=" rightOp=NonExpr;
	public NeExprElements getNeExprAccess() {
		return (pNeExpr != null) ? pNeExpr : (pNeExpr = new NeExprElements());
	}
	
	public ParserRule getNeExprRule() {
		return getNeExprAccess().getRule();
	}

	//CastExpr:
	//	"(" type=QualifiedName ")" operand=Value;
	public CastExprElements getCastExprAccess() {
		return (pCastExpr != null) ? pCastExpr : (pCastExpr = new CastExprElements());
	}
	
	public ParserRule getCastExprRule() {
		return getCastExprAccess().getRule();
	}

	//InstanceOfExpr:
	//	operand=Ref "instanceof" type=QualifiedName;
	public InstanceOfExprElements getInstanceOfExprAccess() {
		return (pInstanceOfExpr != null) ? pInstanceOfExpr : (pInstanceOfExpr = new InstanceOfExprElements());
	}
	
	public ParserRule getInstanceOfExprRule() {
		return getInstanceOfExprAccess().getRule();
	}

	//SootMethodRef:
	//	"<" class=QualifiedName ":" type=QualifiedName name=MethodName "(" (parameters+=QualifiedName (","
	//	parameters+=QualifiedName)*)? ")" ">";
	public SootMethodRefElements getSootMethodRefAccess() {
		return (pSootMethodRef != null) ? pSootMethodRef : (pSootMethodRef = new SootMethodRefElements());
	}
	
	public ParserRule getSootMethodRefRule() {
		return getSootMethodRefAccess().getRule();
	}

	//InvokeExpr:
	//	InstanceInvokeExpr | StaticInvokeExpr;
	public InvokeExprElements getInvokeExprAccess() {
		return (pInvokeExpr != null) ? pInvokeExpr : (pInvokeExpr = new InvokeExprElements());
	}
	
	public ParserRule getInvokeExprRule() {
		return getInvokeExprAccess().getRule();
	}

	//InstanceInvokeExpr:
	//	InterfaceInvokeExpr | SpecialInvokeExpr | VirtualInvokeExpr;
	public InstanceInvokeExprElements getInstanceInvokeExprAccess() {
		return (pInstanceInvokeExpr != null) ? pInstanceInvokeExpr : (pInstanceInvokeExpr = new InstanceInvokeExprElements());
	}
	
	public ParserRule getInstanceInvokeExprRule() {
		return getInstanceInvokeExprAccess().getRule();
	}

	//StaticInvokeExpr:
	//	{StaticInvokeExpr} "staticinvoke" method=SootMethodRef "(" (parameters+=NonExpr ("," parameters+=NonExpr)*)? ")";
	public StaticInvokeExprElements getStaticInvokeExprAccess() {
		return (pStaticInvokeExpr != null) ? pStaticInvokeExpr : (pStaticInvokeExpr = new StaticInvokeExprElements());
	}
	
	public ParserRule getStaticInvokeExprRule() {
		return getStaticInvokeExprAccess().getRule();
	}

	//InterfaceInvokeExpr:
	//	"interfaceinvoke" base=LocalOrWildcard "." method=SootMethodRef "(" (parameters+=NonExpr ("," parameters+=NonExpr)*)?
	//	")";
	public InterfaceInvokeExprElements getInterfaceInvokeExprAccess() {
		return (pInterfaceInvokeExpr != null) ? pInterfaceInvokeExpr : (pInterfaceInvokeExpr = new InterfaceInvokeExprElements());
	}
	
	public ParserRule getInterfaceInvokeExprRule() {
		return getInterfaceInvokeExprAccess().getRule();
	}

	//SpecialInvokeExpr:
	//	"specialinvoke" base=LocalOrWildcard "." method=SootMethodRef "(" (parameters+=NonExpr ("," parameters+=NonExpr)*)?
	//	")";
	public SpecialInvokeExprElements getSpecialInvokeExprAccess() {
		return (pSpecialInvokeExpr != null) ? pSpecialInvokeExpr : (pSpecialInvokeExpr = new SpecialInvokeExprElements());
	}
	
	public ParserRule getSpecialInvokeExprRule() {
		return getSpecialInvokeExprAccess().getRule();
	}

	//VirtualInvokeExpr:
	//	"virtualinvoke" base=LocalOrWildcard "." method=SootMethodRef "(" (parameters+=NonExpr ("," parameters+=NonExpr)*)?
	//	")";
	public VirtualInvokeExprElements getVirtualInvokeExprAccess() {
		return (pVirtualInvokeExpr != null) ? pVirtualInvokeExpr : (pVirtualInvokeExpr = new VirtualInvokeExprElements());
	}
	
	public ParserRule getVirtualInvokeExprRule() {
		return getVirtualInvokeExprAccess().getRule();
	}

	//LocalOrWildcard:
	//	Local | Wildcard;
	public LocalOrWildcardElements getLocalOrWildcardAccess() {
		return (pLocalOrWildcard != null) ? pLocalOrWildcard : (pLocalOrWildcard = new LocalOrWildcardElements());
	}
	
	public ParserRule getLocalOrWildcardRule() {
		return getLocalOrWildcardAccess().getRule();
	}

	//Wildcard:
	//	"«" name=ID "»";
	public WildcardElements getWildcardAccess() {
		return (pWildcard != null) ? pWildcard : (pWildcard = new WildcardElements());
	}
	
	public ParserRule getWildcardRule() {
		return getWildcardAccess().getRule();
	}

	//NewArrayExpr:
	//	"newarray" "(" type=QualifiedName ")" size=Dimension;
	public NewArrayExprElements getNewArrayExprAccess() {
		return (pNewArrayExpr != null) ? pNewArrayExpr : (pNewArrayExpr = new NewArrayExprElements());
	}
	
	public ParserRule getNewArrayExprRule() {
		return getNewArrayExprAccess().getRule();
	}

	//NewExpr:
	//	"new" type=QualifiedName;
	public NewExprElements getNewExprAccess() {
		return (pNewExpr != null) ? pNewExpr : (pNewExpr = new NewExprElements());
	}
	
	public ParserRule getNewExprRule() {
		return getNewExprAccess().getRule();
	}

	//NewMultiArrayExpr:
	//	"newmultiarray" "(" type=QualifiedName ")" size+=Dimension* emptySize+="[]"*;
	public NewMultiArrayExprElements getNewMultiArrayExprAccess() {
		return (pNewMultiArrayExpr != null) ? pNewMultiArrayExpr : (pNewMultiArrayExpr = new NewMultiArrayExprElements());
	}
	
	public ParserRule getNewMultiArrayExprRule() {
		return getNewMultiArrayExprAccess().getRule();
	}

	//Dimension:
	//	"[" size=INT "]";
	public DimensionElements getDimensionAccess() {
		return (pDimension != null) ? pDimension : (pDimension = new DimensionElements());
	}
	
	public ParserRule getDimensionRule() {
		return getDimensionAccess().getRule();
	}

	//UnopExpr:
	//	LengthExpr | NegExpr;
	public UnopExprElements getUnopExprAccess() {
		return (pUnopExpr != null) ? pUnopExpr : (pUnopExpr = new UnopExprElements());
	}
	
	public ParserRule getUnopExprRule() {
		return getUnopExprAccess().getRule();
	}

	//LengthExpr:
	//	"lengthof" operand=Value;
	public LengthExprElements getLengthExprAccess() {
		return (pLengthExpr != null) ? pLengthExpr : (pLengthExpr = new LengthExprElements());
	}
	
	public ParserRule getLengthExprRule() {
		return getLengthExprAccess().getRule();
	}

	//NegExpr:
	//	"neg" operand=Value;
	public NegExprElements getNegExprAccess() {
		return (pNegExpr != null) ? pNegExpr : (pNegExpr = new NegExprElements());
	}
	
	public ParserRule getNegExprRule() {
		return getNegExprAccess().getRule();
	}

	//Local:
	//	name=ID;
	public LocalElements getLocalAccess() {
		return (pLocal != null) ? pLocal : (pLocal = new LocalElements());
	}
	
	public ParserRule getLocalRule() {
		return getLocalAccess().getRule();
	}

	//Ref:
	//	ConcreteRef | IdentityRef | LocalOrWildcard;
	public RefElements getRefAccess() {
		return (pRef != null) ? pRef : (pRef = new RefElements());
	}
	
	public ParserRule getRefRule() {
		return getRefAccess().getRule();
	}

	//IdentityRef:
	//	ParameterRef | ThisRef | CaughtExceptionRef;
	public IdentityRefElements getIdentityRefAccess() {
		return (pIdentityRef != null) ? pIdentityRef : (pIdentityRef = new IdentityRefElements());
	}
	
	public ParserRule getIdentityRefRule() {
		return getIdentityRefAccess().getRule();
	}

	//ParameterRef:
	//	"@" name=ID ":" type=QualifiedName;
	public ParameterRefElements getParameterRefAccess() {
		return (pParameterRef != null) ? pParameterRef : (pParameterRef = new ParameterRefElements());
	}
	
	public ParserRule getParameterRefRule() {
		return getParameterRefAccess().getRule();
	}

	//ThisRef:
	//	"@" "this" ":" type=QualifiedName;
	public ThisRefElements getThisRefAccess() {
		return (pThisRef != null) ? pThisRef : (pThisRef = new ThisRefElements());
	}
	
	public ParserRule getThisRefRule() {
		return getThisRefAccess().getRule();
	}

	//CaughtExceptionRef:
	//	{CaughtExceptionRef} "@" "caughtexception";
	public CaughtExceptionRefElements getCaughtExceptionRefAccess() {
		return (pCaughtExceptionRef != null) ? pCaughtExceptionRef : (pCaughtExceptionRef = new CaughtExceptionRefElements());
	}
	
	public ParserRule getCaughtExceptionRefRule() {
		return getCaughtExceptionRefAccess().getRule();
	}

	//ConcreteRef:
	//	ArrayRef | FieldRef;
	public ConcreteRefElements getConcreteRefAccess() {
		return (pConcreteRef != null) ? pConcreteRef : (pConcreteRef = new ConcreteRefElements());
	}
	
	public ParserRule getConcreteRefRule() {
		return getConcreteRefAccess().getRule();
	}

	//ArrayRef:
	//	base=LocalOrWildcard "[" index=NonExpr "]";
	public ArrayRefElements getArrayRefAccess() {
		return (pArrayRef != null) ? pArrayRef : (pArrayRef = new ArrayRefElements());
	}
	
	public ParserRule getArrayRefRule() {
		return getArrayRefAccess().getRule();
	}

	//FieldRef:
	//	StaticFieldRef | InstanceFieldRef;
	public FieldRefElements getFieldRefAccess() {
		return (pFieldRef != null) ? pFieldRef : (pFieldRef = new FieldRefElements());
	}
	
	public ParserRule getFieldRefRule() {
		return getFieldRefAccess().getRule();
	}

	//StaticFieldRef:
	//	fieldRef=SootFieldRef;
	public StaticFieldRefElements getStaticFieldRefAccess() {
		return (pStaticFieldRef != null) ? pStaticFieldRef : (pStaticFieldRef = new StaticFieldRefElements());
	}
	
	public ParserRule getStaticFieldRefRule() {
		return getStaticFieldRefAccess().getRule();
	}

	//SootFieldRef:
	//	"<" class=QualifiedName ":" Type=QualifiedName name=ID ">";
	public SootFieldRefElements getSootFieldRefAccess() {
		return (pSootFieldRef != null) ? pSootFieldRef : (pSootFieldRef = new SootFieldRefElements());
	}
	
	public ParserRule getSootFieldRefRule() {
		return getSootFieldRefAccess().getRule();
	}

	//InstanceFieldRef:
	//	base=LocalOrWildcard "." fieldRef=FieldRef;
	public InstanceFieldRefElements getInstanceFieldRefAccess() {
		return (pInstanceFieldRef != null) ? pInstanceFieldRef : (pInstanceFieldRef = new InstanceFieldRefElements());
	}
	
	public ParserRule getInstanceFieldRefRule() {
		return getInstanceFieldRefAccess().getRule();
	}

	//Constant:
	//	ClassConstant | NullConstant | NumericConstant | StringConstant;
	public ConstantElements getConstantAccess() {
		return (pConstant != null) ? pConstant : (pConstant = new ConstantElements());
	}
	
	public ParserRule getConstantRule() {
		return getConstantAccess().getRule();
	}

	//ClassConstant:
	//	"class" name=QualifiedName;
	public ClassConstantElements getClassConstantAccess() {
		return (pClassConstant != null) ? pClassConstant : (pClassConstant = new ClassConstantElements());
	}
	
	public ParserRule getClassConstantRule() {
		return getClassConstantAccess().getRule();
	}

	//NullConstant:
	//	{NullConstant} "null";
	public NullConstantElements getNullConstantAccess() {
		return (pNullConstant != null) ? pNullConstant : (pNullConstant = new NullConstantElements());
	}
	
	public ParserRule getNullConstantRule() {
		return getNullConstantAccess().getRule();
	}

	//NumericConstant:
	//	IntConstant | LongConstant | DoubleConstant | FloatConstant;
	public NumericConstantElements getNumericConstantAccess() {
		return (pNumericConstant != null) ? pNumericConstant : (pNumericConstant = new NumericConstantElements());
	}
	
	public ParserRule getNumericConstantRule() {
		return getNumericConstantAccess().getRule();
	}

	//IntConstant:
	//	value=INT;
	public IntConstantElements getIntConstantAccess() {
		return (pIntConstant != null) ? pIntConstant : (pIntConstant = new IntConstantElements());
	}
	
	public ParserRule getIntConstantRule() {
		return getIntConstantAccess().getRule();
	}

	//LongConstant:
	//	value=INT "L";
	public LongConstantElements getLongConstantAccess() {
		return (pLongConstant != null) ? pLongConstant : (pLongConstant = new LongConstantElements());
	}
	
	public ParserRule getLongConstantRule() {
		return getLongConstantAccess().getRule();
	}

	//DoubleConstant:
	//	value=INT "D";
	public DoubleConstantElements getDoubleConstantAccess() {
		return (pDoubleConstant != null) ? pDoubleConstant : (pDoubleConstant = new DoubleConstantElements());
	}
	
	public ParserRule getDoubleConstantRule() {
		return getDoubleConstantAccess().getRule();
	}

	//FloatConstant:
	//	value=INT "F";
	public FloatConstantElements getFloatConstantAccess() {
		return (pFloatConstant != null) ? pFloatConstant : (pFloatConstant = new FloatConstantElements());
	}
	
	public ParserRule getFloatConstantRule() {
		return getFloatConstantAccess().getRule();
	}

	//StringConstant:
	//	value=STRING;
	public StringConstantElements getStringConstantAccess() {
		return (pStringConstant != null) ? pStringConstant : (pStringConstant = new StringConstantElements());
	}
	
	public ParserRule getStringConstantRule() {
		return getStringConstantAccess().getRule();
	}

	//FieldName:
	//	ID;
	public FieldNameElements getFieldNameAccess() {
		return (pFieldName != null) ? pFieldName : (pFieldName = new FieldNameElements());
	}
	
	public ParserRule getFieldNameRule() {
		return getFieldNameAccess().getRule();
	}

	//MethodName:
	//	"<"? ID ">"?;
	public MethodNameElements getMethodNameAccess() {
		return (pMethodName != null) ? pMethodName : (pMethodName = new MethodNameElements());
	}
	
	public ParserRule getMethodNameRule() {
		return getMethodNameAccess().getRule();
	}

	//QualifiedName:
	//	ID ("." ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return (pQualifiedName != null) ? pQualifiedName : (pQualifiedName = new QualifiedNameElements());
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//terminal LABELNAME:
	//	"label" "0".."9"+;
	public TerminalRule getLABELNAMERule() {
		return (tLABELNAME != null) ? tLABELNAME : (tLABELNAME = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "LABELNAME"));
	} 

	//terminal ID:
	//	"$"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "$" | "0".."9")*;
	public TerminalRule getIDRule() {
		return (tID != null) ? tID : (tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ID"));
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
